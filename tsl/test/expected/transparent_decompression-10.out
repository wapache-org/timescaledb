-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set TEST_BASE_NAME transparent_decompression
SELECT format('include/%s_load.sql', :'TEST_BASE_NAME') as "TEST_LOAD_NAME",
       format('include/%s_query.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/results/%s_results_uncompressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNCOMPRESSED",
       format('%s/results/%s_results_compressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_COMPRESSED"
\gset
SELECT format('\! diff %s %s', :'TEST_RESULTS_UNCOMPRESSED', :'TEST_RESULTS_COMPRESSED') as "DIFF_CMD"
\gset
SET work_mem TO '50MB';
CREATE TABLE metrics(filler_1 int, filler_2 int, filler_3 int, time timestamptz NOT NULL, device_id int, device_id_peer int, v0 int, v1 int, v2 float, v3 float);
SELECT create_hypertable('metrics','time');
  create_hypertable   
----------------------
 (1,public,metrics,t)
(1 row)

ALTER TABLE metrics DROP COLUMN filler_1;
INSERT INTO metrics(time,device_id, device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1,  device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-01 0:00:00+0'::timestamptz,'2000-01-05 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics DROP COLUMN filler_2;
INSERT INTO metrics(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id-1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-06 0:00:00+0'::timestamptz,'2000-01-12 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics DROP COLUMN filler_3;
INSERT INTO metrics(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-13 0:00:00+0'::timestamptz,'2000-01-19 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ANALYZE metrics;
-- create identical hypertable with space partitioning
CREATE TABLE metrics_space(filler_1 int, filler_2 int, filler_3 int, time timestamptz NOT NULL, device_id int, device_id_peer int, v0 int, v1 float, v2 float, v3 float);
SELECT create_hypertable('metrics_space','time','device_id',3);
     create_hypertable      
----------------------------
 (2,public,metrics_space,t)
(1 row)

ALTER TABLE metrics_space DROP COLUMN filler_1;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-01 0:00:00+0'::timestamptz,'2000-01-05 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics_space DROP COLUMN filler_2;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-06 0:00:00+0'::timestamptz,'2000-01-12 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics_space DROP COLUMN filler_3;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-13 0:00:00+0'::timestamptz,'2000-01-19 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ANALYZE metrics_space;
-- run queries on uncompressed hypertable and store result
\set PREFIX ''
\set PREFIX_VERBOSE ''
\set ECHO none
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics_space (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
-- compress first and last chunk on the hypertable
ALTER TABLE metrics SET (timescaledb.compress, timescaledb.compress_orderby='v0, v1 desc, time', timescaledb.compress_segmentby='device_id,device_id_peer');
NOTICE:  adding index _compressed_hypertable_5_device_id__ts_meta_sequence_num_idx ON _timescaledb_internal._compressed_hypertable_5 USING BTREE(device_id, _ts_meta_sequence_num)
NOTICE:  adding index _compressed_hypertable_5_device_id_peer__ts_meta_sequence_n_idx ON _timescaledb_internal._compressed_hypertable_5 USING BTREE(device_id_peer, _ts_meta_sequence_num)
SELECT compress_chunk('_timescaledb_internal._hyper_1_1_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_1_3_chunk');
 compress_chunk 
----------------
 
(1 row)

-- compress some chunks on space partitioned hypertable
-- we compress all chunks of first time slice, none of second, and 2 of the last time slice
ALTER TABLE metrics_space SET (timescaledb.compress, timescaledb.compress_orderby='v0, v1 desc, time', timescaledb.compress_segmentby='device_id,device_id_peer');
NOTICE:  adding index _compressed_hypertable_6_device_id__ts_meta_sequence_num_idx ON _timescaledb_internal._compressed_hypertable_6 USING BTREE(device_id, _ts_meta_sequence_num)
NOTICE:  adding index _compressed_hypertable_6_device_id_peer__ts_meta_sequence_n_idx ON _timescaledb_internal._compressed_hypertable_6 USING BTREE(device_id_peer, _ts_meta_sequence_num)
SELECT compress_chunk('_timescaledb_internal._hyper_2_4_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_5_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_6_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_10_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_11_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT
	ht.schema_name || '.' || ht.table_name AS "METRICS_COMPRESSED"
FROM _timescaledb_catalog.hypertable ht
	INNER JOIN _timescaledb_catalog.hypertable ht2 ON ht.id=ht2.compressed_hypertable_id AND ht2.table_name = 'metrics'
\gset
SELECT
	ht.schema_name || '.' || ht.table_name AS "METRICS_SPACE_COMPRESSED"
FROM _timescaledb_catalog.hypertable ht
	INNER JOIN _timescaledb_catalog.hypertable ht2 ON ht.id=ht2.compressed_hypertable_id AND ht2.table_name = 'metrics_space'
\gset
\c :TEST_DBNAME :ROLE_SUPERUSER
-- TODO this should change once we have a canonical way to create indexes on compressed tables
CREATE INDEX c_index ON :METRICS_COMPRESSED(device_id);
CREATE INDEX c_space_index ON :METRICS_SPACE_COMPRESSED(device_id);
CREATE INDEX c_index_2 ON :METRICS_COMPRESSED(device_id, _ts_meta_count);
CREATE INDEX c_space_index_2 ON :METRICS_SPACE_COMPRESSED(device_id, _ts_meta_count);
CREATE INDEX ON :METRICS_COMPRESSED(device_id_peer);
CREATE INDEX ON :METRICS_SPACE_COMPRESSED(device_id_peer);
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE INDEX ON metrics_space(device_id,device_id_peer, v0, v1 desc, time);
CREATE INDEX ON metrics_space(device_id,device_id_peer DESC, v0, v1 desc, time);
CREATE INDEX ON metrics_space(device_id DESC, device_id_peer DESC, v0, v1 desc, time);
ANALYZE metrics_space;
-- run queries on compressed hypertable and store result
\set PREFIX ''
\set PREFIX_VERBOSE ''
\set ECHO none
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics_space (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX",
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off, verbose)'
    ELSE 'EXPLAIN (costs off, verbose)'
  END AS "PREFIX_VERBOSE"
\gset
-- we disable parallelism here otherwise EXPLAIN ANALYZE output
-- will be not stable and differ depending on worker assignment
SET max_parallel_workers_per_gather TO 0;
-- get explain for queries on hypertable with compression
\set TEST_TABLE 'metrics'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- this should use DecompressChunk node
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time LIMIT 5;
                                                                                                                                                     QUERY PLAN                                                                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: metrics."time", metrics.device_id, metrics.device_id_peer, metrics.v0, metrics.v1, metrics.v2, metrics.v3
   ->  Custom Scan (ChunkAppend) on public.metrics (actual rows=5 loops=1)
         Output: metrics."time", metrics.device_id, metrics.device_id_peer, metrics.v0, metrics.v1, metrics.v2, metrics.v3
         Order: metrics."time"
         Startup Exclusion: false
         Runtime Exclusion: false
         ->  Sort (actual rows=5 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
                     Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
                           Filter: (compress_hyper_5_15_chunk.device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk (never executed)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk.device_id = 1)
         ->  Sort (never executed)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (never executed)
                     Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (never executed)
                           Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                           Filter: (compress_hyper_5_16_chunk.device_id = 1)
(28 rows)

-- test RECORD by itself
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics (actual rows=5472 loops=1)
   Order: metrics."time"
   ->  Sort (actual rows=1440 loops=1)
         Sort Key: _hyper_1_1_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
   ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
         Rows Removed by Filter: 8064
   ->  Sort (actual rows=2016 loops=1)
         Sort Key: _hyper_1_3_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(19 rows)

-- test expressions
:PREFIX SELECT
  time_bucket('1d',time),
  v1 + v2 AS "sum",
  COALESCE(NULL,v1,v2) AS "coalesce",
  NULL AS "NULL",
  'text' AS "text",
  :TEST_TABLE AS "RECORD"
FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort (actual rows=10944 loops=1)
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  Result (actual rows=10944 loops=1)
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=2880 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=4 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=4032 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 6048
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=4032 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=6 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 9
(16 rows)

-- test empty targetlist
:PREFIX SELECT FROM :TEST_TABLE;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=27360 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
         ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
         ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(6 rows)

-- test empty resultset
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < 0;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 10
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
         Filter: (device_id < 0)
         Rows Removed by Filter: 10080
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 15
(12 rows)

-- test targetlist not referencing columns
:PREFIX SELECT 1 FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Result (actual rows=27360 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(7 rows)

-- test constraints not present in targetlist
:PREFIX SELECT v1 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(15 rows)

-- test order not present in targetlist
:PREFIX SELECT v2 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(15 rows)

-- test column with all NULL
:PREFIX SELECT v3 FROM :TEST_TABLE WHERE device_id = 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
         Rows Removed by Filter: 8064
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 12
(12 rows)

--
-- test qual pushdown
--
-- v3 is not segment by or order by column so should not be pushed down
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE v3 > 10.0 ORDER BY time, device_id;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=0 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
               Filter: (_hyper_1_1_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 7200
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=0 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 10080
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=0 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Filter: (_hyper_1_3_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 10080
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
(21 rows)

-- device_id constraint should be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

-- test IS NULL / IS NOT NULL
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NOT NULL ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Filter: (device_id IS NOT NULL)
(13 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NULL ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id IS NULL)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 15
(16 rows)

-- test IN (Const,Const)
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=2880 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=4 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=4032 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 6048
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=4032 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=6 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 9
(16 rows)

-- test cast pushdown
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = '1'::text::int ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

--test var op var with two segment by
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = device_id_peer ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 15
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id_peer < device_id ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Filter: (device_id_peer < device_id)
(13 rows)

-- test expressions
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id =  1 + 4/2 ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 3)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 3)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                           Filter: (device_id = 3)
(17 rows)

-- test function calls
-- not yet pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = length(substring(version(),1,3)) ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 0
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
                     Rows Removed by Filter: 5760
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = length("substring"(version(), 1, 3)))
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
                     ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
(18 rows)

--
-- test segment meta pushdown
--
-- order by column and const
:PREFIX SELECT * FROM :TEST_TABLE WHERE time = '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Sort (actual rows=5 loops=1)
         Sort Key: _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=5 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=5 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4995
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=5 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time < '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=60 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=60 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4940
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=5 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time <= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=65 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=65 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4935
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=5 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time >= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27300 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7140 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 60
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7135 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 65
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE '2000-01-01 1:00:00+0' < time ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7135 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 65
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

--pushdowns between order by and segment by columns
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 8064
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 15
(18 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < device_id ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (v0 < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 15
(17 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < v0 ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=7200 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id < v0)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
                           Rows Removed by Filter: 15
(17 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v1 = device_id ORDER BY time, device_id LIMIT 10;
                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=0 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_2, NULL::integer) <= device_id) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_2, NULL::integer) >= device_id))
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=0 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_2, NULL::integer) <= device_id) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_2, NULL::integer) >= device_id))
                           Rows Removed by Filter: 15
(18 rows)

--pushdown between two order by column (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 = v1 ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 7200
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 10080
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(16 rows)

--pushdown of quals on order by and segment by cols anded together
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' and device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                                                                                                                     QUERY PLAN                                                                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   Output: metrics."time", metrics.device_id, metrics.device_id_peer, metrics.v0, metrics.v1, metrics.v2, metrics.v3
   ->  Custom Scan (ChunkAppend) on public.metrics (actual rows=10 loops=1)
         Output: metrics."time", metrics.device_id, metrics.device_id_peer, metrics.v0, metrics.v1, metrics.v2, metrics.v3
         Order: metrics."time"
         Startup Exclusion: false
         Runtime Exclusion: false
         ->  Sort (actual rows=10 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1427 loops=1)
                     Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
                     Filter: (_hyper_1_1_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
                           Filter: ((compress_hyper_5_15_chunk.device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_15_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk (never executed)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Index Cond: (_hyper_1_2_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               Filter: (_hyper_1_2_chunk.device_id = 1)
         ->  Sort (never executed)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (never executed)
                     Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
                     Filter: (_hyper_1_3_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (never executed)
                           Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                           Filter: ((compress_hyper_5_16_chunk.device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
(32 rows)

--pushdown of quals on order by and segment by cols or together (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' or device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27308 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7148 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 52
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(14 rows)

--functions not yet optimized
:PREFIX SELECT * FROM :TEST_TABLE WHERE time < now() ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: metrics."time", metrics.device_id
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics (actual rows=27360 loops=1)
               Chunks excluded during startup: 0
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     Filter: ("time" < now())
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" < now())
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" < now())
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(14 rows)

-- test sort optimization interaction
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 10;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time" DESC
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_3_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Sort (never executed)
               Sort Key: _hyper_1_1_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_15_chunk (never executed)
(14 rows)

:PREFIX SELECT time,device_id FROM :TEST_TABLE ORDER BY time DESC, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_3_chunk."time" DESC, _hyper_1_3_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
(10 rows)

:PREFIX SELECT time,device_id FROM :TEST_TABLE ORDER BY device_id, time DESC LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk.device_id, _hyper_1_1_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(10 rows)

--
-- test ordered path
--
-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
   Sort Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(15 rows)

-- should produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
   ->  Sort (actual rows=6715 loops=1)
         Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
         Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
         Sort Method: quicksort 
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
         Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
         Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=15 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
               Sort Key: compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(20 rows)

-- test order by columns not in targetlist
:PREFIX_VERBOSE SELECT device_id, device_id_peer FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time LIMIT 100;
                                                                                                                                                QUERY PLAN                                                                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk."time"
   ->  Merge Append (actual rows=100 loops=1)
         Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
         ->  Sort (actual rows=100 loops=1)
               Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk."time"
               Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
               Sort Method: top-N heapsort 
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
                     Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk."time"
                     Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=1 loops=1)
               Output: _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk."time"
               Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1
                     Sort Key: compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(22 rows)

-- test ordering only by segmentby columns
-- should produce ordered path and not have sequence number in targetlist of compressed scan
:PREFIX_VERBOSE SELECT device_id, device_id_peer FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer LIMIT 100;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer
   ->  Merge Append (actual rows=100 loops=1)
         Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer
         ->  Sort (actual rows=100 loops=1)
               Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer
               Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer
               Sort Method: top-N heapsort 
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
                     Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer
                     Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=1 loops=1)
               Output: _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer
               Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Sort Key: compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(22 rows)

-- should produce ordered path
-- only referencing PREFIX_VERBOSE should work
:PREFIX_VERBOSE SELECT device_id,device_id_peer,v0 FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0
   ->  Sort (actual rows=6715 loops=1)
         Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0
         Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0
         Sort Method: quicksort 
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
         Output: _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0
         Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=15 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0
               Sort Key: compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(20 rows)

-- should produce ordered path
-- only referencing PREFIX_VERBOSE should work
:PREFIX_VERBOSE SELECT device_id,device_id_peer,v0, v1 FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0, v1 desc;
                                                                                                                                             QUERY PLAN                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC
   ->  Sort (actual rows=6715 loops=1)
         Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1
         Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC
         Sort Method: quicksort 
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
         Output: _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1
         Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=15 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1
               Sort Key: compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(20 rows)

-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time,v3;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
   Sort Key: _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time", _hyper_1_2_chunk.v3
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(15 rows)

-- should produce ordered path
-- ASC/DESC for segmentby columns can be pushed down
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id DESC,device_id_peer DESC,v0,v1 desc,time;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk.device_id DESC, _hyper_1_2_chunk.device_id_peer DESC, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
   ->  Sort (actual rows=6715 loops=1)
         Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
         Sort Key: _hyper_1_2_chunk.device_id DESC, _hyper_1_2_chunk.device_id_peer DESC, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1 DESC, _hyper_1_2_chunk."time"
         Sort Method: quicksort 
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
         Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
         Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=15 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
               Sort Key: compress_hyper_5_16_chunk.device_id DESC, compress_hyper_5_16_chunk.device_id_peer DESC, compress_hyper_5_16_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk._ts_meta_sequence_num, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(20 rows)

-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id DESC,device_id_peer DESC,v0,v1,time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
   Sort Key: _hyper_1_2_chunk.device_id DESC, _hyper_1_2_chunk.device_id_peer DESC, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=6715 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=10080 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               Filter: (_hyper_1_3_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_5_16_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(15 rows)

--
-- test constraint exclusion
--
-- test plan time exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=6715 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(11 rows)

-- test runtime exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08'::text::timestamptz ORDER BY time, device_id;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: metrics."time", metrics.device_id
   Sort Method: quicksort 
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=16795 loops=1)
         Chunks excluded during startup: 1
         ->  Index Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=6715 loops=1)
               Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(10 rows)

-- test aggregate
:PREFIX SELECT count(*) FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(7 rows)

-- test aggregate with GROUP BY
:PREFIX SELECT count(*) FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  HashAggregate (actual rows=5 loops=1)
         Group Key: _hyper_1_1_chunk.device_id
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(11 rows)

-- test window functions with GROUP BY
:PREFIX SELECT sum(count(*)) OVER () FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  WindowAgg (actual rows=5 loops=1)
         ->  HashAggregate (actual rows=5 loops=1)
               Group Key: _hyper_1_1_chunk.device_id
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
(12 rows)

-- test CTE
:PREFIX WITH
q AS (SELECT v1 FROM :TEST_TABLE ORDER BY time)
SELECT * FROM q ORDER BY v1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=27360 loops=1)
   Sort Key: q.v1
   Sort Method: quicksort 
   CTE q
     ->  Custom Scan (ChunkAppend) on metrics (actual rows=27360 loops=1)
           Order: metrics."time"
           ->  Sort (actual rows=7200 loops=1)
                 Sort Key: _hyper_1_1_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                       ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=10080 loops=1)
           ->  Sort (actual rows=10080 loops=1)
                 Sort Key: _hyper_1_3_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                       ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
   ->  CTE Scan on q (actual rows=27360 loops=1)
(18 rows)

-- test CTE join
:PREFIX WITH
q1 AS (SELECT time, v1 FROM :TEST_TABLE WHERE device_id=1 ORDER BY time),
q2 AS (SELECT time, v2 FROM :TEST_TABLE WHERE device_id=2 ORDER BY time)
SELECT * FROM q1 INNER JOIN q2 ON q1.time=q2.time ORDER BY q1.time;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=5472 loops=1)
   Merge Cond: (q1."time" = q2."time")
   CTE q1
     ->  Custom Scan (ChunkAppend) on metrics (actual rows=5472 loops=1)
           Order: metrics."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_1_1_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 1)
                             Rows Removed by Filter: 8
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=2016 loops=1)
                 Filter: (device_id = 1)
                 Rows Removed by Filter: 8064
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_1_3_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 1)
                             Rows Removed by Filter: 12
   CTE q2
     ->  Custom Scan (ChunkAppend) on metrics metrics_1 (actual rows=5472 loops=1)
           Order: metrics_1."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_1_1_chunk_1."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk _hyper_1_1_chunk_1 (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=2 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 8
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk _hyper_1_2_chunk_1 (actual rows=2016 loops=1)
                 Filter: (device_id = 2)
                 Rows Removed by Filter: 8064
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_1_3_chunk_1."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk _hyper_1_3_chunk_1 (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=3 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 12
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q1."time"
         Sort Method: quicksort 
         ->  CTE Scan on q1 (actual rows=5472 loops=1)
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q2."time"
         Sort Method: quicksort 
         ->  CTE Scan on q2 (actual rows=5472 loops=1)
(50 rows)

-- test prepared statement
PREPARE prep AS SELECT count(time) FROM :TEST_TABLE WHERE device_id = 1;
:PREFIX EXECUTE prep;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(13 rows)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

DEALLOCATE prep;
--
-- test indexes
--
SET enable_seqscan TO false;
-- IndexScans should work
:PREFIX_VERBOSE SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id, time;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk."time"
   ->  Sort (actual rows=1440 loops=1)
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Key: _hyper_1_1_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
               ->  Index Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id
                     Index Cond: (compress_hyper_5_15_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
         Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id
         Filter: (_hyper_1_2_chunk.device_id = 1)
         Rows Removed by Filter: 8064
   ->  Sort (actual rows=2016 loops=1)
         Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id
         Sort Key: _hyper_1_3_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id
                     Index Cond: (compress_hyper_5_16_chunk.device_id = 1)
(24 rows)

-- globs should not plan IndexOnlyScans
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk."time"
   ->  Sort (actual rows=1440 loops=1)
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
         Sort Key: _hyper_1_1_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
               ->  Index Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
                     Index Cond: (compress_hyper_5_15_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
         Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
         Filter: (_hyper_1_2_chunk.device_id = 1)
         Rows Removed by Filter: 8064
   ->  Sort (actual rows=2016 loops=1)
         Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
         Sort Key: _hyper_1_3_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Index Cond: (compress_hyper_5_16_chunk.device_id = 1)
(24 rows)

-- whole row reference should work
:PREFIX_VERBOSE SELECT test_table FROM :TEST_TABLE as test_table WHERE device_id = 1 ORDER BY device_id, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: test_table."time"
   ->  Sort (actual rows=1440 loops=1)
         Output: ((test_table.*)::metrics), test_table.device_id, test_table."time"
         Sort Key: test_table."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk test_table (actual rows=1440 loops=1)
               Output: test_table.*, test_table.device_id, test_table."time"
               ->  Index Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
                     Index Cond: (compress_hyper_5_15_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk test_table_1 (actual rows=2016 loops=1)
         Output: test_table_1.*, test_table_1.device_id, test_table_1."time"
         Filter: (test_table_1.device_id = 1)
         Rows Removed by Filter: 8064
   ->  Sort (actual rows=2016 loops=1)
         Output: ((test_table_2.*)::metrics), test_table_2.device_id, test_table_2."time"
         Sort Key: test_table_2."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk test_table_2 (actual rows=2016 loops=1)
               Output: test_table_2.*, test_table_2.device_id, test_table_2."time"
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Index Cond: (compress_hyper_5_16_chunk.device_id = 1)
(24 rows)

-- even when we select only a segmentby column, we still need count
:PREFIX_VERBOSE SELECT device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
         Output: _hyper_1_1_chunk.device_id
         ->  Index Only Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
               Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id
               Index Cond: (compress_hyper_5_15_chunk.device_id = 1)
               Heap Fetches: 2
   ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
         Output: _hyper_1_2_chunk.device_id
         Filter: (_hyper_1_2_chunk.device_id = 1)
         Rows Removed by Filter: 8064
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
         Output: _hyper_1_3_chunk.device_id
         ->  Index Only Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id
               Index Cond: (compress_hyper_5_16_chunk.device_id = 1)
               Heap Fetches: 3
(17 rows)

:PREFIX_VERBOSE SELECT count(*) FROM :TEST_TABLE WHERE device_id = 1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   Output: count(*)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Index Only Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id
                     Index Cond: (compress_hyper_5_15_chunk.device_id = 1)
                     Heap Fetches: 2
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (_hyper_1_2_chunk.device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Index Only Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id
                     Index Cond: (compress_hyper_5_16_chunk.device_id = 1)
                     Heap Fetches: 3
(16 rows)

--use the peer index
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id_peer = 1 ORDER BY device_id_peer, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
   Sort Key: _hyper_1_1_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=0 loops=1)
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id, _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.v0, _hyper_1_1_chunk.v1, _hyper_1_1_chunk.v2, _hyper_1_1_chunk.v3
               ->  Index Scan using compress_hyper_5_15_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk."time", compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer, compress_hyper_5_15_chunk.v0, compress_hyper_5_15_chunk.v1, compress_hyper_5_15_chunk.v2, compress_hyper_5_15_chunk.v3
                     Index Cond: (compress_hyper_5_15_chunk.device_id_peer = 1)
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _timescaledb_internal._hyper_1_2_chunk (actual rows=0 loops=1)
               Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id, _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.v0, _hyper_1_2_chunk.v1, _hyper_1_2_chunk.v2, _hyper_1_2_chunk.v3
               Filter: (_hyper_1_2_chunk.device_id_peer = 1)
               Rows Removed by Filter: 10080
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=0 loops=1)
               Output: _hyper_1_3_chunk."time", _hyper_1_3_chunk.device_id, _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.v0, _hyper_1_3_chunk.v1, _hyper_1_3_chunk.v2, _hyper_1_3_chunk.v3
               ->  Index Scan using compress_hyper_5_16_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk."time", compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer, compress_hyper_5_16_chunk.v0, compress_hyper_5_16_chunk.v1, compress_hyper_5_16_chunk.v2, compress_hyper_5_16_chunk.v3
                     Index Cond: (compress_hyper_5_16_chunk.device_id_peer = 1)
(19 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer = 1 ORDER BY device_id_peer;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=0 loops=1)
         Output: _hyper_1_1_chunk.device_id_peer
         ->  Index Scan using compress_hyper_5_15_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=0 loops=1)
               Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id_peer
               Index Cond: (compress_hyper_5_15_chunk.device_id_peer = 1)
   ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=0 loops=1)
         Output: _hyper_1_2_chunk.device_id_peer
         Filter: (_hyper_1_2_chunk.device_id_peer = 1)
         Rows Removed by Filter: 10080
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=0 loops=1)
         Output: _hyper_1_3_chunk.device_id_peer
         ->  Index Scan using compress_hyper_5_16_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=0 loops=1)
               Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id_peer
               Index Cond: (compress_hyper_5_16_chunk.device_id_peer = 1)
(15 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer IN (VALUES (1));
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=0 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=0 loops=1)
               Output: _hyper_1_1_chunk.device_id_peer
               ->  Index Scan using compress_hyper_5_15_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_15_chunk.device_id_peer = (1))
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=0 loops=1)
               Output: _hyper_1_2_chunk.device_id_peer
               Filter: ((1) = _hyper_1_2_chunk.device_id_peer)
               Rows Removed by Filter: 10080
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=0 loops=1)
               Output: _hyper_1_3_chunk.device_id_peer
               ->  Index Scan using compress_hyper_5_16_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_16_chunk.device_id_peer = (1))
(22 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer IN (VALUES (1), (2));
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=0 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=0 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=0 loops=2)
               Output: _hyper_1_1_chunk.device_id_peer
               ->  Index Scan using compress_hyper_5_15_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_15_chunk.device_id_peer = "*VALUES*".column1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=0 loops=2)
               Output: _hyper_1_2_chunk.device_id_peer
               Filter: ("*VALUES*".column1 = _hyper_1_2_chunk.device_id_peer)
               Rows Removed by Filter: 10080
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=0 loops=2)
               Output: _hyper_1_3_chunk.device_id_peer
               ->  Index Scan using compress_hyper_5_16_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_16_chunk.device_id_peer = "*VALUES*".column1)
(25 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=5472 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
               Output: _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.device_id
               ->  Index Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_15_chunk.device_id = (1))
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.device_id
               Filter: ((1) = _hyper_1_2_chunk.device_id)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.device_id
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_16_chunk.device_id = (1))
(22 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1), (2));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=10944 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=5472 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=2)
               Output: _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.device_id
               ->  Index Scan using compress_hyper_5_15_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_15_chunk.device_id = "*VALUES*".column1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=2)
               Output: _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_1_2_chunk.device_id)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=2)
               Output: _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.device_id
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=2)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Index Cond: (compress_hyper_5_16_chunk.device_id = "*VALUES*".column1)
(25 rows)

-- force a BitmapHeapScan
SET enable_indexscan TO false;
:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=5472 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=1)
               Output: _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.device_id
               Filter: ((1) = _hyper_1_1_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_5_15_chunk.device_id = (1))
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_5_15_chunk_c_index_2 (actual rows=2 loops=1)
                           Index Cond: (compress_hyper_5_15_chunk.device_id = (1))
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.device_id
               Filter: ((1) = _hyper_1_2_chunk.device_id)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=1)
               Output: _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.device_id
               Filter: ((1) = _hyper_1_3_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_5_16_chunk.device_id = (1))
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_5_16_chunk_c_index_2 (actual rows=3 loops=1)
                           Index Cond: (compress_hyper_5_16_chunk.device_id = (1))
(30 rows)

SET enable_indexscan TO false;
:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1), (2));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=10944 loops=1)
   Output: _hyper_1_1_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=5472 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk (actual rows=1440 loops=2)
               Output: _hyper_1_1_chunk.device_id_peer, _hyper_1_1_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_1_1_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_5_15_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_5_15_chunk._ts_meta_count, compress_hyper_5_15_chunk.device_id, compress_hyper_5_15_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_5_15_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=2
                     ->  Bitmap Index Scan on compress_hyper_5_15_chunk_c_index_2 (actual rows=2 loops=2)
                           Index Cond: (compress_hyper_5_15_chunk.device_id = "*VALUES*".column1)
         ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk (actual rows=2016 loops=2)
               Output: _hyper_1_2_chunk.device_id_peer, _hyper_1_2_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_1_2_chunk.device_id)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_3_chunk (actual rows=2016 loops=2)
               Output: _hyper_1_3_chunk.device_id_peer, _hyper_1_3_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_1_3_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_5_16_chunk (actual rows=3 loops=2)
                     Output: compress_hyper_5_16_chunk._ts_meta_count, compress_hyper_5_16_chunk.device_id, compress_hyper_5_16_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_5_16_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=2
                     ->  Bitmap Index Scan on compress_hyper_5_16_chunk_c_index_2 (actual rows=3 loops=2)
                           Index Cond: (compress_hyper_5_16_chunk.device_id = "*VALUES*".column1)
(33 rows)

SET enable_indexscan TO true;
SET enable_seqscan TO true;
-- test view
CREATE OR REPLACE ViEW compressed_view AS SELECT time, device_id, v1, v2 FROM :TEST_TABLE;
:PREFIX SELECT * FROM compressed_view WHERE device_id = 1 ORDER BY time DESC LIMIT 10;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time" DESC
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_3_chunk."time" DESC
               Sort Method: quicksort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=3 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 12
         ->  Index Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_1_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_15_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

DROP VIEW compressed_view;
-- test INNER JOIN
:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=m2.device_id ORDER BY m1.time, m1.device_id LIMIT 10;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=27360 loops=1)
               Hash Cond: ((m1."time" = m2."time") AND (m1.device_id = m2.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=7200 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=10 loops=1)
                           ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=10080 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=10080 loops=1)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=15 loops=1)
(20 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time INNER JOIN :TEST_TABLE m3 ON m2.time = m3.time AND m1.device_id=m2.device_id AND m3.device_id = 3 ORDER BY m1.time, m1.device_id LIMIT 10;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=27360 loops=1)
               Hash Cond: ((m2."time" = m1."time") AND (m2.device_id = m1.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=15 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 32768 (originally 16384)  Batches: 1 (originally 1) 
                     ->  Hash Join (actual rows=27360 loops=1)
                           Hash Cond: (m1."time" = m3."time")
                           ->  Append (actual rows=27360 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                                       ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                                 ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                                       ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
                           ->  Hash (actual rows=5472 loops=1)
                                 Buckets: 8192 (originally 4096)  Batches: 1 (originally 1) 
                                 ->  Append (actual rows=5472 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m3 (actual rows=1440 loops=1)
                                             ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_2 (actual rows=2 loops=1)
                                                   Filter: (device_id = 3)
                                                   Rows Removed by Filter: 8
                                       ->  Seq Scan on _hyper_1_2_chunk m3_1 (actual rows=2016 loops=1)
                                             Filter: (device_id = 3)
                                             Rows Removed by Filter: 8064
                                       ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m3_2 (actual rows=2016 loops=1)
                                             ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_2 (actual rows=3 loops=1)
                                                   Filter: (device_id = 3)
                                                   Rows Removed by Filter: 12
(36 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (m1."time" = m2."time")
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=100 loops=1)
               Order: m1."time"
               ->  Sort (actual rows=100 loops=1)
                     Sort Key: m1_1."time"
                     Sort Method: quicksort 
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                                 Filter: (device_id = 1)
                                 Rows Removed by Filter: 8
               ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (never executed)
                     Filter: (device_id = 1)
               ->  Sort (never executed)
                     Sort Key: m1_3."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (never executed)
                           ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                                 Filter: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics m2 (actual rows=100 loops=1)
                     Order: m2."time"
                     ->  Sort (actual rows=100 loops=1)
                           Sort Key: m2_1."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2_1 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 8
                     ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m2_2 (never executed)
                           Filter: (device_id = 2)
                     ->  Sort (never executed)
                           Sort Key: m2_3."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_3 (never executed)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (never executed)
                                       Filter: (device_id = 2)
(36 rows)

:PREFIX SELECT * FROM metrics m1 INNER JOIN metrics_space m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (m1."time" = m2."time")
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=100 loops=1)
               Order: m1."time"
               ->  Sort (actual rows=100 loops=1)
                     Sort Key: m1_1."time"
                     Sort Method: quicksort 
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                                 Filter: (device_id = 1)
                                 Rows Removed by Filter: 8
               ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (never executed)
                     Filter: (device_id = 1)
               ->  Sort (never executed)
                     Sort Key: m1_3."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (never executed)
                           ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                                 Filter: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space m2 (actual rows=100 loops=1)
                     Order: m2."time"
                     ->  Sort (actual rows=100 loops=1)
                           Sort Key: m2_1."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                     ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk m2_2 (never executed)
                           Index Cond: (device_id = 2)
                     ->  Sort (never executed)
                           Sort Key: m2_3."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_3 (never executed)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (never executed)
                                       Filter: (device_id = 2)
(36 rows)

-- test OUTER JOIN
:PREFIX SELECT * FROM :TEST_TABLE m1 LEFT OUTER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=m2.device_id ORDER BY m1.time, m1.device_id LIMIT 10;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=27360 loops=1)
               Hash Cond: ((m1."time" = m2."time") AND (m1.device_id = m2.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=7200 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=10 loops=1)
                           ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=10080 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=10080 loops=1)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=15 loops=1)
(20 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 LEFT OUTER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Sort (actual rows=100 loops=1)
         Sort Key: m1."time", m1.device_id, m2."time", m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=27360 loops=1)
               Hash Cond: (m1."time" = m2."time")
               Join Filter: (m1.device_id = 1)
               Rows Removed by Join Filter: 21888
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=5472 loops=1)
                     Buckets: 8192 (originally 4096)  Batches: 1 (originally 1) 
                     ->  Append (actual rows=5472 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 8
                           ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=2016 loops=1)
                                 Filter: (device_id = 2)
                                 Rows Removed by Filter: 8064
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=3 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 12
(28 rows)

:PREFIX SELECT * FROM metrics m1 LEFT OUTER JOIN metrics_space m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Sort (actual rows=100 loops=1)
         Sort Key: m1."time", m1.device_id, m2."time", m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=27360 loops=1)
               Hash Cond: (m1."time" = m2."time")
               Join Filter: (m1.device_id = 1)
               Rows Removed by Join Filter: 21888
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=5472 loops=1)
                     Buckets: 8192 (originally 4096)  Batches: 1 (originally 1) 
                     ->  Append (actual rows=5472 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                           ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk m2_1 (actual rows=2016 loops=1)
                                 Index Cond: (device_id = 2)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_2 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 6
(27 rows)

-- test implicit self-join
:PREFIX SELECT * FROM :TEST_TABLE m1, :TEST_TABLE m2 WHERE m1.time = m2.time ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 20;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=20 loops=1)
   ->  Sort (actual rows=20 loops=1)
         Sort Key: m1."time", m1.device_id, m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=136800 loops=1)
               Hash Cond: (m1."time" = m2."time")
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=7200 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=10 loops=1)
                           ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=10080 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=10080 loops=1)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=15 loops=1)
(20 rows)

-- test self-join with sub-query
:PREFIX SELECT * FROM (SELECT * FROM :TEST_TABLE m1) m1 INNER JOIN (SELECT * FROM :TEST_TABLE m2) m2 ON m1.time = m2.time ORDER BY m1.time, m1.device_id, m2.device_id LIMIT 10;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id, m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=136800 loops=1)
               Hash Cond: (m1."time" = m2."time")
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m2 (actual rows=7200 loops=1)
                                 ->  Seq Scan on compress_hyper_5_15_chunk compress_hyper_5_15_chunk_1 (actual rows=10 loops=1)
                           ->  Seq Scan on _hyper_1_2_chunk m2_1 (actual rows=10080 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m2_2 (actual rows=10080 loops=1)
                                 ->  Seq Scan on compress_hyper_5_16_chunk compress_hyper_5_16_chunk_1 (actual rows=15 loops=1)
(20 rows)

:PREFIX SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) g(time) INNER JOIN LATERAL(SELECT time FROM :TEST_TABLE m1 WHERE m1.time = g.time LIMIT 1) m1 ON true;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 2
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=1 loops=2)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 7
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=1 loops=2)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
(20 rows)

-- test prepared statement with params pushdown
PREPARE param_prep(int) AS SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) g(time) INNER JOIN LATERAL(SELECT time FROM :TEST_TABLE m1 WHERE m1.time = g.time AND device_id = $1 LIMIT 1) m1 ON true;
:PREFIX EXECUTE param_prep(1);
                                                                                                                                      QUERY PLAN                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 2
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Index Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 4
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
(21 rows)

:PREFIX EXECUTE param_prep(2);
                                                                                                                                      QUERY PLAN                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 2
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 2) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 2
               ->  Index Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Filter: (device_id = 2)
                     Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 2) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 4
(21 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(2);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(2);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

DEALLOCATE param_prep;
-- test continuous aggs
SET client_min_messages TO error;
CREATE VIEW cagg_test WITH (timescaledb.continuous) AS SELECT time_bucket('1d',time) AS time, device_id, avg(v1) FROM :TEST_TABLE WHERE device_id=1 GROUP BY 1,2;
REFRESH MATERIALIZED VIEW cagg_test;
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
SELECT time FROM cagg_test ORDER BY time LIMIT 1;
             time             
------------------------------
 Fri Dec 31 16:00:00 1999 PST
(1 row)

DROP VIEW cagg_test CASCADE;
RESET client_min_messages;
\set TEST_TABLE 'metrics_space'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- this should use DecompressChunk node
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time LIMIT 5;
                                                                                                                                                     QUERY PLAN                                                                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: metrics_space."time", metrics_space.device_id, metrics_space.device_id_peer, metrics_space.v0, metrics_space.v1, metrics_space.v2, metrics_space.v3
   ->  Custom Scan (ChunkAppend) on public.metrics_space (actual rows=5 loops=1)
         Output: metrics_space."time", metrics_space.device_id, metrics_space.device_id_peer, metrics_space.v0, metrics_space.v1, metrics_space.v2, metrics_space.v3
         Order: metrics_space."time"
         Startup Exclusion: false
         Runtime Exclusion: false
         ->  Sort (actual rows=5 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
                     Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
                           Filter: (compress_hyper_6_17_chunk.device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_7_chunk (never executed)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Filter: (_hyper_2_7_chunk.device_id = 1)
         ->  Sort (never executed)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (never executed)
                     Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (never executed)
                           Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                           Filter: (compress_hyper_6_20_chunk.device_id = 1)
(27 rows)

-- test RECORD by itself
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=5472 loops=1)
   Order: metrics_space."time"
   ->  Sort (actual rows=1440 loops=1)
         Sort Key: _hyper_2_4_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
   ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
   ->  Sort (actual rows=2016 loops=1)
         Sort Key: _hyper_2_10_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
(16 rows)

-- test expressions
:PREFIX SELECT
  time_bucket('1d',time),
  v1 + v2 AS "sum",
  COALESCE(NULL,v1,v2) AS "coalesce",
  NULL AS "NULL",
  'text' AS "text",
  :TEST_TABLE AS "RECORD"
FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=10944 loops=1)
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  Result (actual rows=10944 loops=1)
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 4
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk (actual rows=2016 loops=1)
                     Index Cond: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
(23 rows)

-- test empty targetlist
:PREFIX SELECT FROM :TEST_TABLE;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=27360 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
         ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
   ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
   ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
   ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
   ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(15 rows)

-- test empty resultset
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < 0;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 2
   ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 6
   ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 2
   ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_7_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_9_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 3
   ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 9
   ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_12_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
(29 rows)

-- test targetlist not referencing columns
:PREFIX SELECT 1 FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Result (actual rows=27360 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
               ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(16 rows)

-- test constraints not present in targetlist
:PREFIX SELECT v1 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(12 rows)

-- test order not present in targetlist
:PREFIX SELECT v2 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(12 rows)

-- test column with all NULL
:PREFIX SELECT v3 FROM :TEST_TABLE WHERE device_id = 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               Filter: (device_id = 1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               Filter: (device_id = 1)
   ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
(9 rows)

--
-- test qual pushdown
--
-- v3 is not segment by or order by column so should not be pushed down
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE v3 > 10.0 ORDER BY time, device_id;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=0 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
               Filter: (_hyper_2_4_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 1440
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
               Output: _hyper_2_5_chunk."time", _hyper_2_5_chunk.device_id, _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.v0, _hyper_2_5_chunk.v1, _hyper_2_5_chunk.v2, _hyper_2_5_chunk.v3
               Filter: (_hyper_2_5_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 4320
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk."time", compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer, compress_hyper_6_18_chunk.v0, compress_hyper_6_18_chunk.v1, compress_hyper_6_18_chunk.v2, compress_hyper_6_18_chunk.v3
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
               Output: _hyper_2_6_chunk."time", _hyper_2_6_chunk.device_id, _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.v0, _hyper_2_6_chunk.v1, _hyper_2_6_chunk.v2, _hyper_2_6_chunk.v3
               Filter: (_hyper_2_6_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 1440
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk."time", compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer, compress_hyper_6_19_chunk.v0, compress_hyper_6_19_chunk.v1, compress_hyper_6_19_chunk.v2, compress_hyper_6_19_chunk.v3
         ->  Seq Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=0 loops=1)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Filter: (_hyper_2_7_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 2016
         ->  Seq Scan on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
               Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
               Filter: (_hyper_2_8_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 6048
         ->  Seq Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
               Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
               Filter: (_hyper_2_9_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 2016
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=0 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Filter: (_hyper_2_10_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 2016
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
               Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
               Filter: (_hyper_2_11_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 6048
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
         ->  Seq Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
               Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
               Filter: (_hyper_2_12_chunk.v3 > '10'::double precision)
               Rows Removed by Filter: 2016
(51 rows)

-- device_id constraint should be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_20_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

-- test IS NULL / IS NOT NULL
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NOT NULL ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
(28 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NULL ORDER BY time, device_id LIMIT 10;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 2
               ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 9
               ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
(33 rows)

-- test IN (Const,Const)
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id LIMIT 10;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 4
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk (actual rows=2016 loops=1)
                     Index Cond: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
(23 rows)

-- test cast pushdown
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = '1'::text::int ORDER BY time, device_id LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_20_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

--test var op var with two segment by
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = device_id_peer ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 2
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 9
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
(37 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id_peer < device_id ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
(28 rows)

-- test expressions
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id =  1 + 4/2 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_6_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 3)
         ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
               Filter: (device_id = 3)
         ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
               Filter: (device_id = 3)
(13 rows)

-- test function calls
-- not yet pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = length(substring(version(),1,3)) ORDER BY time, device_id LIMIT 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: _hyper_2_4_chunk."time"
                     Sort Method: quicksort 
                     ->  Sort (actual rows=0 loops=1)
                           Sort Key: _hyper_2_4_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 Rows Removed by Filter: 1440
                                 ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: _hyper_2_5_chunk."time"
                     Sort Method: quicksort 
                     ->  Sort (actual rows=0 loops=1)
                           Sort Key: _hyper_2_5_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 Rows Removed by Filter: 4320
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Sort (actual rows=10 loops=1)
                     Sort Key: _hyper_2_6_chunk."time"
                     Sort Method: top-N heapsort 
                     ->  Sort (actual rows=1440 loops=1)
                           Sort Key: _hyper_2_6_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
               ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
               ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Sort (never executed)
                     Sort Key: _hyper_2_10_chunk."time"
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_10_chunk."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_6_20_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: _hyper_2_11_chunk."time"
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_11_chunk."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (never executed)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_6_21_chunk (never executed)
               ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
(60 rows)

--
-- test segment meta pushdown
--
-- order by column and const
:PREFIX SELECT * FROM :TEST_TABLE WHERE time = '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Sort (actual rows=5 loops=1)
         Sort Key: _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=5 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 999
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=1 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=3 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2997
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=3 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 999
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=1 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time < '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=60 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=12 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 988
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=36 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2964
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=12 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 988
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time <= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=65 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=13 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 987
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=39 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2961
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=13 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 987
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time >= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27300 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1428 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 12
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4284 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 36
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1428 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 12
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(36 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(36 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE '2000-01-01 1:00:00+0' < time ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1427 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
(36 rows)

--pushdowns between order by and segment by columns
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < 1 ORDER BY time, device_id LIMIT 10;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 2
               ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Index Cond: (v0 < 1)
               ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Index Cond: (v0 < 1)
               ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Index Cond: (v0 < 1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 9
               ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Index Cond: (v0 < 1)
(38 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < device_id ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 2
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 9
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
(42 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < v0 ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id < v0)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
(33 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v1 = device_id ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 6048
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
(37 rows)

--pushdown between two order by column (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 = v1 ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 6048
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
(37 rows)

--pushdown of quals on order by and segment by cols anded together
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' and device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                                                                                                                     QUERY PLAN                                                                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   Output: metrics_space."time", metrics_space.device_id, metrics_space.device_id_peer, metrics_space.v0, metrics_space.v1, metrics_space.v2, metrics_space.v3
   ->  Custom Scan (ChunkAppend) on public.metrics_space (actual rows=10 loops=1)
         Output: metrics_space."time", metrics_space.device_id, metrics_space.device_id_peer, metrics_space.v0, metrics_space.v1, metrics_space.v2, metrics_space.v3
         Order: metrics_space."time"
         Startup Exclusion: false
         Runtime Exclusion: false
         ->  Sort (actual rows=10 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1427 loops=1)
                     Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
                     Filter: (_hyper_2_4_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                           Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
                           Filter: ((compress_hyper_6_17_chunk.device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_17_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_7_chunk (never executed)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Index Cond: (_hyper_2_7_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               Filter: (_hyper_2_7_chunk.device_id = 1)
         ->  Sort (never executed)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (never executed)
                     Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
                     Filter: (_hyper_2_10_chunk."time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (never executed)
                           Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                           Filter: ((compress_hyper_6_20_chunk.device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
(31 rows)

--pushdown of quals on order by and segment by cols or together (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' or device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27308 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
(30 rows)

--functions not yet optimized
:PREFIX SELECT * FROM :TEST_TABLE WHERE time < now() ORDER BY time, device_id LIMIT 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: metrics_space."time", metrics_space.device_id
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=27360 loops=1)
               ->  Merge Append (actual rows=7200 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Merge Append (actual rows=10080 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                           Filter: ("time" < now())
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
               ->  Merge Append (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
(31 rows)

-- test sort optimization interaction
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=10 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=3 loops=1)
                     Heap Fetches: 3
               ->  Sort (actual rows=6 loops=1)
                     Sort Key: _hyper_2_11_chunk."time" DESC
                     Sort Method: top-N heapsort 
                     ->  Sort (actual rows=6048 loops=1)
                           Sort Key: _hyper_2_11_chunk."time" DESC
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Sort (actual rows=3 loops=1)
                     Sort Key: _hyper_2_10_chunk."time" DESC
                     Sort Method: top-N heapsort 
                     ->  Sort (actual rows=2016 loops=1)
                           Sort Key: _hyper_2_10_chunk."time" DESC
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_6_chunk."time" DESC
               ->  Sort (never executed)
                     Sort Key: _hyper_2_6_chunk."time" DESC
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_6_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_6_19_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: _hyper_2_5_chunk."time" DESC
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_5_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: _hyper_2_4_chunk."time" DESC
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_4_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_6_17_chunk (never executed)
(51 rows)

:PREFIX SELECT time,device_id FROM :TEST_TABLE ORDER BY time DESC, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_12_chunk."time" DESC, _hyper_2_12_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
(19 rows)

:PREFIX SELECT time,device_id FROM :TEST_TABLE ORDER BY device_id, time DESC LIMIT 10;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Append (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk.device_id, _hyper_2_4_chunk."time" DESC
         ->  Sort (actual rows=1 loops=1)
               Sort Key: _hyper_2_4_chunk.device_id, _hyper_2_4_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
         ->  Sort (actual rows=1 loops=1)
               Sort Key: _hyper_2_5_chunk.device_id, _hyper_2_5_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=1 loops=1)
               Sort Key: _hyper_2_6_chunk.device_id, _hyper_2_6_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_10_chunk.device_id, _hyper_2_10_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
         ->  Sort (actual rows=1 loops=1)
               Sort Key: _hyper_2_11_chunk.device_id, _hyper_2_11_chunk."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(36 rows)

--
-- test ordered path
--
-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
   Sort Key: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Filter: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
               Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
               Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
               Filter: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
               Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
               Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
               Filter: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(31 rows)

-- should produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1 DESC, _hyper_2_8_chunk."time"
   ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
         Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
         Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
         Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
         Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=3 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
               Sort Key: compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
         Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
         Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=9 loops=1)
               Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
               Sort Key: compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
         Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
         Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(34 rows)

-- test order by columns not in targetlist
:PREFIX_VERBOSE SELECT device_id, device_id_peer FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time LIMIT 100;
                                                                                                                                                QUERY PLAN                                                                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk."time"
   ->  Merge Append (actual rows=100 loops=1)
         Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1 DESC, _hyper_2_8_chunk."time"
         ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=1 loops=1)
               Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk."time"
               Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_12_chunk (actual rows=1 loops=1)
               Output: _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk."time"
               Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=1 loops=1)
               Output: _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk."time"
               Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1
                     Sort Key: compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=1 loops=1)
               Output: _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk."time"
               Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1
                     Sort Key: compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_9_chunk (actual rows=1 loops=1)
               Output: _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk."time"
               Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=100 loops=1)
               Output: _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk."time"
               Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 100
(40 rows)

-- test ordering only by segmentby columns
-- should produce ordered path and not have sequence number in targetlist of compressed scan
:PREFIX_VERBOSE SELECT device_id, device_id_peer FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer LIMIT 100;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer
   ->  Merge Append (actual rows=100 loops=1)
         Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer
         ->  Index Only Scan Backward using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=1 loops=1)
               Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer
               Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=1 loops=1)
               Output: _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer
               Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=100 loops=1)
               Output: _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer
               Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Sort Key: compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=1 loops=1)
               Output: _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer
               Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Sort (actual rows=1 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Sort Key: compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Sort Method: quicksort 
                     ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                           Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                           Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Index Only Scan Backward using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=1 loops=1)
               Output: _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer
               Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=1 loops=1)
               Output: _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer
               Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
(40 rows)

-- should produce ordered path
-- only referencing PREFIX_VERBOSE should work
:PREFIX_VERBOSE SELECT device_id,device_id_peer,v0 FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0
   ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
         Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0
         Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 4029
   ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0
         Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 2016
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0
         Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=3 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0
               Sort Key: compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
         Output: _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0
         Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=9 loops=1)
               Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0
               Sort Key: compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0
         Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 1343
   ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0
         Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 1343
(38 rows)

-- should produce ordered path
-- only referencing PREFIX_VERBOSE should work
:PREFIX_VERBOSE SELECT device_id,device_id_peer,v0, v1 FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0, v1 desc;
                                                                                                                                             QUERY PLAN                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1 DESC
   ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
         Output: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1
         Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 4029
   ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1
         Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 2016
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1
         Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=3 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1
               Sort Key: compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
         Output: _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1
         Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=9 loops=1)
               Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1
               Sort Key: compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1
         Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 1343
   ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1
         Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 1343
(38 rows)

-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id,device_id_peer,v0,v1 desc,time,v3;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
   Sort Key: _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1 DESC, _hyper_2_8_chunk."time", _hyper_2_8_chunk.v3
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
               Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
               Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
               Filter: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
               Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
               Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
               Filter: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Seq Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Filter: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
(31 rows)

-- should produce ordered path
-- ASC/DESC for segmentby columns can be pushed down
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id DESC,device_id_peer DESC,v0,v1 desc,time;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=16795 loops=1)
   Sort Key: _hyper_2_8_chunk.device_id DESC, _hyper_2_8_chunk.device_id_peer DESC, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1 DESC, _hyper_2_8_chunk."time"
   ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
         Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
         Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
         Index Cond: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
         Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=3 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
               Sort Key: compress_hyper_6_20_chunk.device_id DESC, compress_hyper_6_20_chunk.device_id_peer DESC, compress_hyper_6_20_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk._ts_meta_sequence_num, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
         Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
         Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sort (actual rows=9 loops=1)
               Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
               Sort Key: compress_hyper_6_21_chunk.device_id DESC, compress_hyper_6_21_chunk.device_id_peer DESC, compress_hyper_6_21_chunk._ts_meta_sequence_num
               Sort Method: quicksort 
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk._ts_meta_sequence_num, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
         Index Cond: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
         Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
         Index Cond: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(34 rows)

-- should not produce ordered path
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY device_id DESC,device_id_peer DESC,v0,v1,time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
   Sort Key: _hyper_2_8_chunk.device_id DESC, _hyper_2_8_chunk.device_id_peer DESC, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_8_chunk (actual rows=4029 loops=1)
               Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
               Index Cond: (_hyper_2_8_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
               Filter: (_hyper_2_12_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               Filter: (_hyper_2_10_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_20_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=6048 loops=1)
               Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
               Filter: (_hyper_2_11_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Filter: (_timescaledb_internal.segment_meta_get_max(compress_hyper_6_21_chunk._ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
               Filter: (_hyper_2_9_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Seq Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=1343 loops=1)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Filter: (_hyper_2_7_chunk."time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
(31 rows)

--
-- test constraint exclusion
--
-- test plan time exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=1343 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=4029 loops=1)
               Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=1343 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(22 rows)

-- test runtime exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08'::text::timestamptz ORDER BY time, device_id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: metrics_space."time", metrics_space.device_id
   Sort Method: quicksort 
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=16795 loops=1)
         ->  Merge Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
         ->  Merge Append (actual rows=6715 loops=1)
               ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1343 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=4029 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               ->  Index Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1343 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
         ->  Merge Append (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
(33 rows)

-- test aggregate
:PREFIX SELECT count(*) FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
               ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(16 rows)

-- test aggregate with GROUP BY
:PREFIX SELECT count(*) FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  HashAggregate (actual rows=5 loops=1)
         Group Key: _hyper_2_4_chunk.device_id
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(20 rows)

-- test window functions with GROUP BY
:PREFIX SELECT sum(count(*)) OVER () FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  WindowAgg (actual rows=5 loops=1)
         ->  HashAggregate (actual rows=5 loops=1)
               Group Key: _hyper_2_4_chunk.device_id
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(21 rows)

-- test CTE
:PREFIX WITH
q AS (SELECT v1 FROM :TEST_TABLE ORDER BY time)
SELECT * FROM q ORDER BY v1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=27360 loops=1)
   Sort Key: q.v1
   Sort Method: quicksort 
   CTE q
     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=27360 loops=1)
           Order: metrics_space."time"
           ->  Merge Append (actual rows=7200 loops=1)
                 Sort Key: _hyper_2_4_chunk."time"
                 ->  Sort (actual rows=1440 loops=1)
                       Sort Key: _hyper_2_4_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=1440 loops=1)
                             Sort Key: _hyper_2_4_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                                   ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                 ->  Sort (actual rows=4320 loops=1)
                       Sort Key: _hyper_2_5_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=4320 loops=1)
                             Sort Key: _hyper_2_5_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                                   ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                 ->  Sort (actual rows=1440 loops=1)
                       Sort Key: _hyper_2_6_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=1440 loops=1)
                             Sort Key: _hyper_2_6_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                                   ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
           ->  Merge Append (actual rows=10080 loops=1)
                 Sort Key: _hyper_2_7_chunk."time"
                 ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
                 ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=6048 loops=1)
                 ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=2016 loops=1)
           ->  Merge Append (actual rows=10080 loops=1)
                 Sort Key: _hyper_2_10_chunk."time"
                 ->  Sort (actual rows=2016 loops=1)
                       Sort Key: _hyper_2_10_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=2016 loops=1)
                             Sort Key: _hyper_2_10_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                                   ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                 ->  Sort (actual rows=6048 loops=1)
                       Sort Key: _hyper_2_11_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=6048 loops=1)
                             Sort Key: _hyper_2_11_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                                   ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                 ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=2016 loops=1)
   ->  CTE Scan on q (actual rows=27360 loops=1)
(57 rows)

-- test CTE join
:PREFIX WITH
q1 AS (SELECT time, v1 FROM :TEST_TABLE WHERE device_id=1 ORDER BY time),
q2 AS (SELECT time, v2 FROM :TEST_TABLE WHERE device_id=2 ORDER BY time)
SELECT * FROM q1 INNER JOIN q2 ON q1.time=q2.time ORDER BY q1.time;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=5472 loops=1)
   Merge Cond: (q1."time" = q2."time")
   CTE q1
     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=5472 loops=1)
           Order: metrics_space."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_2_4_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 1)
           ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
                 Filter: (device_id = 1)
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_2_10_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 1)
   CTE q2
     ->  Custom Scan (ChunkAppend) on metrics_space metrics_space_1 (actual rows=5472 loops=1)
           Order: metrics_space_1."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_2_5_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 4
           ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=2016 loops=1)
                 Index Cond: (device_id = 2)
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_2_11_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 6
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q1."time"
         Sort Method: quicksort 
         ->  CTE Scan on q1 (actual rows=5472 loops=1)
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q2."time"
         Sort Method: quicksort 
         ->  CTE Scan on q2 (actual rows=5472 loops=1)
(46 rows)

-- test prepared statement
PREPARE prep AS SELECT count(time) FROM :TEST_TABLE WHERE device_id = 1;
:PREFIX EXECUTE prep;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(10 rows)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

DEALLOCATE prep;
--
-- test indexes
--
SET enable_seqscan TO false;
-- IndexScans should work
:PREFIX_VERBOSE SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id, time;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk."time"
   ->  Sort (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id
         Sort Key: _hyper_2_10_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id
                     Index Cond: (compress_hyper_6_20_chunk.device_id = 1)
   ->  Sort (actual rows=1440 loops=1)
         Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Key: _hyper_2_4_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
               ->  Index Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id
                     Index Cond: (compress_hyper_6_17_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id
         Filter: (_hyper_2_7_chunk.device_id = 1)
(23 rows)

-- globs should not plan IndexOnlyScans
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk."time"
   ->  Sort (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
         Sort Key: _hyper_2_10_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Index Cond: (compress_hyper_6_20_chunk.device_id = 1)
   ->  Sort (actual rows=1440 loops=1)
         Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
         Sort Key: _hyper_2_4_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
               ->  Index Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
                     Index Cond: (compress_hyper_6_17_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
         Filter: (_hyper_2_7_chunk.device_id = 1)
(23 rows)

-- whole row reference should work
:PREFIX_VERBOSE SELECT test_table FROM :TEST_TABLE as test_table WHERE device_id = 1 ORDER BY device_id, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append (actual rows=5472 loops=1)
   Sort Key: test_table."time"
   ->  Sort (actual rows=2016 loops=1)
         Output: ((test_table.*)::metrics_space), test_table.device_id, test_table."time"
         Sort Key: test_table."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk test_table (actual rows=2016 loops=1)
               Output: test_table.*, test_table.device_id, test_table."time"
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Index Cond: (compress_hyper_6_20_chunk.device_id = 1)
   ->  Sort (actual rows=1440 loops=1)
         Output: ((test_table_1.*)::metrics_space), test_table_1.device_id, test_table_1."time"
         Sort Key: test_table_1."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk test_table_1 (actual rows=1440 loops=1)
               Output: test_table_1.*, test_table_1.device_id, test_table_1."time"
               ->  Index Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
                     Index Cond: (compress_hyper_6_17_chunk.device_id = 1)
   ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _timescaledb_internal._hyper_2_7_chunk test_table_2 (actual rows=2016 loops=1)
         Output: test_table_2.*, test_table_2.device_id, test_table_2."time"
         Filter: (test_table_2.device_id = 1)
(23 rows)

-- even when we select only a segmentby column, we still need count
:PREFIX_VERBOSE SELECT device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY device_id;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_10_chunk.device_id
         ->  Index Only Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id
               Index Cond: (compress_hyper_6_20_chunk.device_id = 1)
               Heap Fetches: 3
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
         Output: _hyper_2_4_chunk.device_id
         ->  Index Only Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
               Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id
               Index Cond: (compress_hyper_6_17_chunk.device_id = 1)
               Heap Fetches: 2
   ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
         Output: _hyper_2_7_chunk.device_id
         Index Cond: (_hyper_2_7_chunk.device_id = 1)
         Heap Fetches: 2016
(17 rows)

:PREFIX_VERBOSE SELECT count(*) FROM :TEST_TABLE WHERE device_id = 1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   Output: count(*)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Index Only Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id
                     Index Cond: (compress_hyper_6_20_chunk.device_id = 1)
                     Heap Fetches: 3
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Index Only Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id
                     Index Cond: (compress_hyper_6_17_chunk.device_id = 1)
                     Heap Fetches: 2
         ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
               Index Cond: (_hyper_2_7_chunk.device_id = 1)
               Heap Fetches: 2016
(16 rows)

--use the peer index
:PREFIX_VERBOSE SELECT * FROM :TEST_TABLE WHERE device_id_peer = 1 ORDER BY device_id_peer, time;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
   Sort Key: _hyper_2_4_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=0 loops=1)
               Output: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id, _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.v0, _hyper_2_4_chunk.v1, _hyper_2_4_chunk.v2, _hyper_2_4_chunk.v3
               ->  Index Scan using compress_hyper_6_17_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk."time", compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer, compress_hyper_6_17_chunk.v0, compress_hyper_6_17_chunk.v1, compress_hyper_6_17_chunk.v2, compress_hyper_6_17_chunk.v3
                     Index Cond: (compress_hyper_6_17_chunk.device_id_peer = 1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
               Output: _hyper_2_5_chunk."time", _hyper_2_5_chunk.device_id, _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.v0, _hyper_2_5_chunk.v1, _hyper_2_5_chunk.v2, _hyper_2_5_chunk.v3
               ->  Index Scan using compress_hyper_6_18_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk."time", compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer, compress_hyper_6_18_chunk.v0, compress_hyper_6_18_chunk.v1, compress_hyper_6_18_chunk.v2, compress_hyper_6_18_chunk.v3
                     Index Cond: (compress_hyper_6_18_chunk.device_id_peer = 1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
               Output: _hyper_2_6_chunk."time", _hyper_2_6_chunk.device_id, _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.v0, _hyper_2_6_chunk.v1, _hyper_2_6_chunk.v2, _hyper_2_6_chunk.v3
               ->  Index Scan using compress_hyper_6_19_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk."time", compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer, compress_hyper_6_19_chunk.v0, compress_hyper_6_19_chunk.v1, compress_hyper_6_19_chunk.v2, compress_hyper_6_19_chunk.v3
                     Index Cond: (compress_hyper_6_19_chunk.device_id_peer = 1)
         ->  Index Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=0 loops=1)
               Output: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id, _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.v0, _hyper_2_7_chunk.v1, _hyper_2_7_chunk.v2, _hyper_2_7_chunk.v3
               Index Cond: (_hyper_2_7_chunk.device_id_peer = 1)
         ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
               Output: _hyper_2_8_chunk."time", _hyper_2_8_chunk.device_id, _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.v0, _hyper_2_8_chunk.v1, _hyper_2_8_chunk.v2, _hyper_2_8_chunk.v3
               Index Cond: (_hyper_2_8_chunk.device_id_peer = 1)
         ->  Index Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
               Output: _hyper_2_9_chunk."time", _hyper_2_9_chunk.device_id, _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.v0, _hyper_2_9_chunk.v1, _hyper_2_9_chunk.v2, _hyper_2_9_chunk.v3
               Index Cond: (_hyper_2_9_chunk.device_id_peer = 1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=0 loops=1)
               Output: _hyper_2_10_chunk."time", _hyper_2_10_chunk.device_id, _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.v0, _hyper_2_10_chunk.v1, _hyper_2_10_chunk.v2, _hyper_2_10_chunk.v3
               ->  Index Scan using compress_hyper_6_20_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk."time", compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer, compress_hyper_6_20_chunk.v0, compress_hyper_6_20_chunk.v1, compress_hyper_6_20_chunk.v2, compress_hyper_6_20_chunk.v3
                     Index Cond: (compress_hyper_6_20_chunk.device_id_peer = 1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
               Output: _hyper_2_11_chunk."time", _hyper_2_11_chunk.device_id, _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.v0, _hyper_2_11_chunk.v1, _hyper_2_11_chunk.v2, _hyper_2_11_chunk.v3
               ->  Index Scan using compress_hyper_6_21_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk."time", compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer, compress_hyper_6_21_chunk.v0, compress_hyper_6_21_chunk.v1, compress_hyper_6_21_chunk.v2, compress_hyper_6_21_chunk.v3
                     Index Cond: (compress_hyper_6_21_chunk.device_id_peer = 1)
         ->  Index Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
               Output: _hyper_2_12_chunk."time", _hyper_2_12_chunk.device_id, _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.v0, _hyper_2_12_chunk.v1, _hyper_2_12_chunk.v2, _hyper_2_12_chunk.v3
               Index Cond: (_hyper_2_12_chunk.device_id_peer = 1)
(42 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer = 1 ORDER BY device_id_peer;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=0 loops=1)
         Output: _hyper_2_4_chunk.device_id_peer
         ->  Index Scan using compress_hyper_6_17_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=0 loops=1)
               Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id_peer
               Index Cond: (compress_hyper_6_17_chunk.device_id_peer = 1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
         Output: _hyper_2_5_chunk.device_id_peer
         ->  Index Scan using compress_hyper_6_18_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=1)
               Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id_peer
               Index Cond: (compress_hyper_6_18_chunk.device_id_peer = 1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
         Output: _hyper_2_6_chunk.device_id_peer
         ->  Index Scan using compress_hyper_6_19_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=1)
               Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id_peer
               Index Cond: (compress_hyper_6_19_chunk.device_id_peer = 1)
   ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=0 loops=1)
         Output: _hyper_2_7_chunk.device_id_peer
         Index Cond: (_hyper_2_7_chunk.device_id_peer = 1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
         Output: _hyper_2_8_chunk.device_id_peer
         Index Cond: (_hyper_2_8_chunk.device_id_peer = 1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
         Output: _hyper_2_9_chunk.device_id_peer
         Index Cond: (_hyper_2_9_chunk.device_id_peer = 1)
         Heap Fetches: 0
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=0 loops=1)
         Output: _hyper_2_10_chunk.device_id_peer
         ->  Index Scan using compress_hyper_6_20_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=0 loops=1)
               Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id_peer
               Index Cond: (compress_hyper_6_20_chunk.device_id_peer = 1)
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
         Output: _hyper_2_11_chunk.device_id_peer
         ->  Index Scan using compress_hyper_6_21_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=1)
               Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id_peer
               Index Cond: (compress_hyper_6_21_chunk.device_id_peer = 1)
   ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
         Output: _hyper_2_12_chunk.device_id_peer
         Index Cond: (_hyper_2_12_chunk.device_id_peer = 1)
         Heap Fetches: 0
(42 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer IN (VALUES (1));
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=0 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=0 loops=1)
               Output: _hyper_2_4_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_17_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_17_chunk.device_id_peer = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
               Output: _hyper_2_5_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_18_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_18_chunk.device_id_peer = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
               Output: _hyper_2_6_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_19_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_19_chunk.device_id_peer = (1))
         ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=0 loops=1)
               Output: _hyper_2_7_chunk.device_id_peer
               Filter: ((1) = _hyper_2_7_chunk.device_id_peer)
               Rows Removed by Filter: 2016
               Heap Fetches: 2016
         ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
               Output: _hyper_2_8_chunk.device_id_peer
               Filter: ((1) = _hyper_2_8_chunk.device_id_peer)
               Rows Removed by Filter: 6048
               Heap Fetches: 6048
         ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
               Output: _hyper_2_9_chunk.device_id_peer
               Filter: ((1) = _hyper_2_9_chunk.device_id_peer)
               Rows Removed by Filter: 2016
               Heap Fetches: 2016
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=0 loops=1)
               Output: _hyper_2_10_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_20_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_20_chunk.device_id_peer = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
               Output: _hyper_2_11_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_21_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_21_chunk.device_id_peer = (1))
         ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
               Output: _hyper_2_12_chunk.device_id_peer
               Filter: ((1) = _hyper_2_12_chunk.device_id_peer)
               Rows Removed by Filter: 2016
               Heap Fetches: 2016
(53 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id_peer IN (VALUES (1), (2));
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=0 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=0 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=0 loops=2)
               Output: _hyper_2_4_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_17_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_17_chunk.device_id_peer = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=2)
               Output: _hyper_2_5_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_18_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_18_chunk.device_id_peer = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=2)
               Output: _hyper_2_6_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_19_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_19_chunk.device_id_peer = "*VALUES*".column1)
         ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=0 loops=2)
               Output: _hyper_2_7_chunk.device_id_peer
               Index Cond: (_hyper_2_7_chunk.device_id_peer = "*VALUES*".column1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=2)
               Output: _hyper_2_8_chunk.device_id_peer
               Index Cond: (_hyper_2_8_chunk.device_id_peer = "*VALUES*".column1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=2)
               Output: _hyper_2_9_chunk.device_id_peer
               Index Cond: (_hyper_2_9_chunk.device_id_peer = "*VALUES*".column1)
               Heap Fetches: 0
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=0 loops=2)
               Output: _hyper_2_10_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_20_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_20_chunk.device_id_peer = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=2)
               Output: _hyper_2_11_chunk.device_id_peer
               ->  Index Scan using compress_hyper_6_21_chunk_device_id_peer_idx on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_21_chunk.device_id_peer = "*VALUES*".column1)
         ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=2)
               Output: _hyper_2_12_chunk.device_id_peer
               Index Cond: (_hyper_2_12_chunk.device_id_peer = "*VALUES*".column1)
               Heap Fetches: 0
(52 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1));
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=5472 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
               Output: _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.device_id
               ->  Index Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_17_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
               Output: _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.device_id
               ->  Index Scan using compress_hyper_6_18_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_18_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
               Output: _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.device_id
               ->  Index Scan using compress_hyper_6_19_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_19_chunk.device_id = (1))
         ->  Index Only Scan Backward using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.device_id
               Filter: ((1) = _hyper_2_7_chunk.device_id)
               Heap Fetches: 2016
         ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
               Output: _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.device_id
               Index Cond: (_hyper_2_8_chunk.device_id = (1))
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
               Output: _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.device_id
               Filter: ((1) = _hyper_2_9_chunk.device_id)
               Rows Removed by Filter: 2016
               Heap Fetches: 2016
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.device_id
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_20_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
               Output: _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.device_id
               ->  Index Scan using compress_hyper_6_21_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_21_chunk.device_id = (1))
         ->  Index Only Scan Backward using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
               Output: _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.device_id
               Filter: ((1) = _hyper_2_12_chunk.device_id)
               Rows Removed by Filter: 2016
               Heap Fetches: 2016
(51 rows)

:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1), (2));
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=10944 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=5472 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=720 loops=2)
               Output: _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.device_id
               ->  Index Scan using compress_hyper_6_17_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=1 loops=2)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_17_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=720 loops=2)
               Output: _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.device_id
               ->  Index Scan using compress_hyper_6_18_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=1 loops=2)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_18_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=2)
               Output: _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.device_id
               ->  Index Scan using compress_hyper_6_19_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_19_chunk.device_id = "*VALUES*".column1)
         ->  Index Only Scan using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_7_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.device_id
               Index Cond: (_hyper_2_7_chunk.device_id = "*VALUES*".column1)
               Heap Fetches: 2016
         ->  Index Only Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_8_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.device_id
               Index Cond: (_hyper_2_8_chunk.device_id = "*VALUES*".column1)
               Heap Fetches: 2016
         ->  Index Only Scan using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=2)
               Output: _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.device_id
               Index Cond: (_hyper_2_9_chunk.device_id = "*VALUES*".column1)
               Heap Fetches: 0
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.device_id
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_20_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.device_id
               ->  Index Scan using compress_hyper_6_21_chunk_c_space_index_2 on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Index Cond: (compress_hyper_6_21_chunk.device_id = "*VALUES*".column1)
         ->  Index Only Scan using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=2)
               Output: _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.device_id
               Index Cond: (_hyper_2_12_chunk.device_id = "*VALUES*".column1)
               Heap Fetches: 0
(52 rows)

-- force a BitmapHeapScan
SET enable_indexscan TO false;
:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=5472 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  HashAggregate (actual rows=1 loops=1)
         Output: (1)
         Group Key: 1
         ->  Result (actual rows=1 loops=1)
               Output: 1
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=1440 loops=1)
               Output: _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.device_id
               Filter: ((1) = _hyper_2_4_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_17_chunk.device_id = (1))
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_17_chunk_c_space_index_2 (actual rows=2 loops=1)
                           Index Cond: (compress_hyper_6_17_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=0 loops=1)
               Output: _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.device_id
               Filter: ((1) = _hyper_2_5_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_18_chunk.device_id = (1))
                     ->  Bitmap Index Scan on compress_hyper_6_18_chunk_c_space_index_2 (actual rows=0 loops=1)
                           Index Cond: (compress_hyper_6_18_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=1)
               Output: _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.device_id
               Filter: ((1) = _hyper_2_6_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_19_chunk.device_id = (1))
                     ->  Bitmap Index Scan on compress_hyper_6_19_chunk_c_space_index_2 (actual rows=0 loops=1)
                           Index Cond: (compress_hyper_6_19_chunk.device_id = (1))
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.device_id
               Filter: ((1) = _hyper_2_7_chunk.device_id)
               Heap Blocks: exact=17
               ->  Bitmap Index Scan on _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=2016 loops=1)
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_8_chunk (actual rows=0 loops=1)
               Output: _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.device_id
               Recheck Cond: (_hyper_2_8_chunk.device_id = (1))
               ->  Bitmap Index Scan on _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=0 loops=1)
                     Index Cond: (_hyper_2_8_chunk.device_id = (1))
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=1)
               Output: _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.device_id
               Filter: ((1) = _hyper_2_9_chunk.device_id)
               Rows Removed by Filter: 2016
               Heap Blocks: exact=17
               ->  Bitmap Index Scan on _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=2016 loops=1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=2016 loops=1)
               Output: _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.device_id
               Filter: ((1) = _hyper_2_10_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_20_chunk.device_id = (1))
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_20_chunk_c_space_index_2 (actual rows=3 loops=1)
                           Index Cond: (compress_hyper_6_20_chunk.device_id = (1))
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=0 loops=1)
               Output: _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.device_id
               Filter: ((1) = _hyper_2_11_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=0 loops=1)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_21_chunk.device_id = (1))
                     ->  Bitmap Index Scan on compress_hyper_6_21_chunk_c_space_index_2 (actual rows=0 loops=1)
                           Index Cond: (compress_hyper_6_21_chunk.device_id = (1))
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=1)
               Output: _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.device_id
               Filter: ((1) = _hyper_2_12_chunk.device_id)
               Rows Removed by Filter: 2016
               Heap Blocks: exact=17
               ->  Bitmap Index Scan on _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=2016 loops=1)
(72 rows)

SET enable_indexscan TO false;
:PREFIX_VERBOSE SELECT device_id_peer FROM :TEST_TABLE WHERE device_id IN (VALUES (1), (2));
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=10944 loops=1)
   Output: _hyper_2_4_chunk.device_id_peer
   ->  Unique (actual rows=2 loops=1)
         Output: "*VALUES*".column1
         ->  Sort (actual rows=2 loops=1)
               Output: "*VALUES*".column1
               Sort Key: "*VALUES*".column1
               Sort Method: quicksort 
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
                     Output: "*VALUES*".column1
   ->  Append (actual rows=5472 loops=2)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_4_chunk (actual rows=720 loops=2)
               Output: _hyper_2_4_chunk.device_id_peer, _hyper_2_4_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_2_4_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_17_chunk (actual rows=1 loops=2)
                     Output: compress_hyper_6_17_chunk._ts_meta_count, compress_hyper_6_17_chunk.device_id, compress_hyper_6_17_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_17_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_17_chunk_c_space_index_2 (actual rows=1 loops=2)
                           Index Cond: (compress_hyper_6_17_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_5_chunk (actual rows=720 loops=2)
               Output: _hyper_2_5_chunk.device_id_peer, _hyper_2_5_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_2_5_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_18_chunk (actual rows=1 loops=2)
                     Output: compress_hyper_6_18_chunk._ts_meta_count, compress_hyper_6_18_chunk.device_id, compress_hyper_6_18_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_18_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_18_chunk_c_space_index_2 (actual rows=1 loops=2)
                           Index Cond: (compress_hyper_6_18_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_6_chunk (actual rows=0 loops=2)
               Output: _hyper_2_6_chunk.device_id_peer, _hyper_2_6_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_2_6_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_19_chunk (actual rows=0 loops=2)
                     Output: compress_hyper_6_19_chunk._ts_meta_count, compress_hyper_6_19_chunk.device_id, compress_hyper_6_19_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_19_chunk.device_id = "*VALUES*".column1)
                     ->  Bitmap Index Scan on compress_hyper_6_19_chunk_c_space_index_2 (actual rows=0 loops=2)
                           Index Cond: (compress_hyper_6_19_chunk.device_id = "*VALUES*".column1)
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_7_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_7_chunk.device_id_peer, _hyper_2_7_chunk.device_id
               Recheck Cond: (_hyper_2_7_chunk.device_id = "*VALUES*".column1)
               Heap Blocks: exact=17
               ->  Bitmap Index Scan on _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=1008 loops=2)
                     Index Cond: (_hyper_2_7_chunk.device_id = "*VALUES*".column1)
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_8_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_8_chunk.device_id_peer, _hyper_2_8_chunk.device_id
               Recheck Cond: (_hyper_2_8_chunk.device_id = "*VALUES*".column1)
               Heap Blocks: exact=51
               ->  Bitmap Index Scan on _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=1008 loops=2)
                     Index Cond: (_hyper_2_8_chunk.device_id = "*VALUES*".column1)
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_9_chunk (actual rows=0 loops=2)
               Output: _hyper_2_9_chunk.device_id_peer, _hyper_2_9_chunk.device_id
               Recheck Cond: (_hyper_2_9_chunk.device_id = "*VALUES*".column1)
               ->  Bitmap Index Scan on _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=0 loops=2)
                     Index Cond: (_hyper_2_9_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_10_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_10_chunk.device_id_peer, _hyper_2_10_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_2_10_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_20_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_6_20_chunk._ts_meta_count, compress_hyper_6_20_chunk.device_id, compress_hyper_6_20_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_20_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_20_chunk_c_space_index_2 (actual rows=2 loops=2)
                           Index Cond: (compress_hyper_6_20_chunk.device_id = "*VALUES*".column1)
         ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_2_11_chunk (actual rows=1008 loops=2)
               Output: _hyper_2_11_chunk.device_id_peer, _hyper_2_11_chunk.device_id
               Filter: ("*VALUES*".column1 = _hyper_2_11_chunk.device_id)
               ->  Bitmap Heap Scan on _timescaledb_internal.compress_hyper_6_21_chunk (actual rows=2 loops=2)
                     Output: compress_hyper_6_21_chunk._ts_meta_count, compress_hyper_6_21_chunk.device_id, compress_hyper_6_21_chunk.device_id_peer
                     Recheck Cond: (compress_hyper_6_21_chunk.device_id = "*VALUES*".column1)
                     Heap Blocks: exact=1
                     ->  Bitmap Index Scan on compress_hyper_6_21_chunk_c_space_index_2 (actual rows=2 loops=2)
                           Index Cond: (compress_hyper_6_21_chunk.device_id = "*VALUES*".column1)
         ->  Bitmap Heap Scan on _timescaledb_internal._hyper_2_12_chunk (actual rows=0 loops=2)
               Output: _hyper_2_12_chunk.device_id_peer, _hyper_2_12_chunk.device_id
               Recheck Cond: (_hyper_2_12_chunk.device_id = "*VALUES*".column1)
               ->  Bitmap Index Scan on _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 (actual rows=0 loops=2)
                     Index Cond: (_hyper_2_12_chunk.device_id = "*VALUES*".column1)
(77 rows)

SET enable_indexscan TO true;
SET enable_seqscan TO true;
-- test view
CREATE OR REPLACE ViEW compressed_view AS SELECT time, device_id, v1, v2 FROM :TEST_TABLE;
:PREFIX SELECT * FROM compressed_view WHERE device_id = 1 ORDER BY time DESC LIMIT 10;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time" DESC
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_10_chunk."time" DESC
               Sort Method: quicksort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_4_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_17_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

DROP VIEW compressed_view;
-- test INNER JOIN
:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=m2.device_id ORDER BY m1.time, m1.device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=27360 loops=1)
               Hash Cond: ((m1."time" = m2."time") AND (m1.device_id = m2.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_1 (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m1_3 (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk m1_4 (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk m1_5 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_6 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_7 (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk m1_8 (actual rows=2016 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_17_chunk compress_hyper_6_17_chunk_1 (actual rows=2 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=4320 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk compress_hyper_6_18_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m2_2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_1 (actual rows=2 loops=1)
                           ->  Seq Scan on _hyper_2_7_chunk m2_3 (actual rows=2016 loops=1)
                           ->  Seq Scan on _hyper_2_8_chunk m2_4 (actual rows=6048 loops=1)
                           ->  Seq Scan on _hyper_2_9_chunk m2_5 (actual rows=2016 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m2_6 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_20_chunk compress_hyper_6_20_chunk_1 (actual rows=3 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_7 (actual rows=6048 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk compress_hyper_6_21_chunk_1 (actual rows=9 loops=1)
                           ->  Seq Scan on _hyper_2_12_chunk m2_8 (actual rows=2016 loops=1)
(38 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time INNER JOIN :TEST_TABLE m3 ON m2.time = m3.time AND m1.device_id=m2.device_id AND m3.device_id = 3 ORDER BY m1.time, m1.device_id LIMIT 10;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=27360 loops=1)
               Hash Cond: ((m2."time" = m1."time") AND (m2.device_id = m1.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk compress_hyper_6_17_chunk_1 (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk compress_hyper_6_18_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m2_2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_1 (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m2_3 (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk m2_4 (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk m2_5 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m2_6 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk compress_hyper_6_20_chunk_1 (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_7 (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk compress_hyper_6_21_chunk_1 (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk m2_8 (actual rows=2016 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 32768 (originally 16384)  Batches: 1 (originally 1) 
                     ->  Hash Join (actual rows=27360 loops=1)
                           Hash Cond: (m1."time" = m3."time")
                           ->  Append (actual rows=27360 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                                       ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_1 (actual rows=4320 loops=1)
                                       ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_2 (actual rows=1440 loops=1)
                                       ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                                 ->  Seq Scan on _hyper_2_7_chunk m1_3 (actual rows=2016 loops=1)
                                 ->  Seq Scan on _hyper_2_8_chunk m1_4 (actual rows=6048 loops=1)
                                 ->  Seq Scan on _hyper_2_9_chunk m1_5 (actual rows=2016 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_6 (actual rows=2016 loops=1)
                                       ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_7 (actual rows=6048 loops=1)
                                       ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                                 ->  Seq Scan on _hyper_2_12_chunk m1_8 (actual rows=2016 loops=1)
                           ->  Hash (actual rows=5472 loops=1)
                                 Buckets: 8192  Batches: 1 
                                 ->  Append (actual rows=5472 loops=1)
                                       ->  Seq Scan on _hyper_2_12_chunk m3 (actual rows=2016 loops=1)
                                             Filter: (device_id = 3)
                                       ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m3_1 (actual rows=1440 loops=1)
                                             ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_2 (actual rows=2 loops=1)
                                                   Filter: (device_id = 3)
                                       ->  Seq Scan on _hyper_2_9_chunk m3_2 (actual rows=2016 loops=1)
                                             Filter: (device_id = 3)
(50 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (m1."time" = m2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space m1 (actual rows=100 loops=1)
               Order: m1."time"
               ->  Sort (actual rows=100 loops=1)
                     Sort Key: m1_1."time"
                     Sort Method: quicksort 
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1_1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                                 Filter: (device_id = 1)
               ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk m1_2 (never executed)
                     Filter: (device_id = 1)
               ->  Sort (never executed)
                     Sort Key: m1_3."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_3 (never executed)
                           ->  Seq Scan on compress_hyper_6_20_chunk (never executed)
                                 Filter: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space m2 (actual rows=100 loops=1)
                     Order: m2."time"
                     ->  Sort (actual rows=100 loops=1)
                           Sort Key: m2_1."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                     ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk m2_2 (never executed)
                           Index Cond: (device_id = 2)
                     ->  Sort (never executed)
                           Sort Key: m2_3."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_3 (never executed)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (never executed)
                                       Filter: (device_id = 2)
(35 rows)

:PREFIX SELECT * FROM metrics m1 INNER JOIN metrics_space m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (m1."time" = m2."time")
         ->  Custom Scan (ChunkAppend) on metrics m1 (actual rows=100 loops=1)
               Order: m1."time"
               ->  Sort (actual rows=100 loops=1)
                     Sort Key: m1_1."time"
                     Sort Method: quicksort 
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1_1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                                 Filter: (device_id = 1)
                                 Rows Removed by Filter: 8
               ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk m1_2 (never executed)
                     Filter: (device_id = 1)
               ->  Sort (never executed)
                     Sort Key: m1_3."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_3 (never executed)
                           ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                                 Filter: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space m2 (actual rows=100 loops=1)
                     Order: m2."time"
                     ->  Sort (actual rows=100 loops=1)
                           Sort Key: m2_1."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                     ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk m2_2 (never executed)
                           Index Cond: (device_id = 2)
                     ->  Sort (never executed)
                           Sort Key: m2_3."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_3 (never executed)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (never executed)
                                       Filter: (device_id = 2)
(36 rows)

-- test OUTER JOIN
:PREFIX SELECT * FROM :TEST_TABLE m1 LEFT OUTER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=m2.device_id ORDER BY m1.time, m1.device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=27360 loops=1)
               Hash Cond: ((m1."time" = m2."time") AND (m1.device_id = m2.device_id))
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_1 (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m1_3 (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk m1_4 (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk m1_5 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_6 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_7 (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk m1_8 (actual rows=2016 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_17_chunk compress_hyper_6_17_chunk_1 (actual rows=2 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=4320 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk compress_hyper_6_18_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m2_2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_1 (actual rows=2 loops=1)
                           ->  Seq Scan on _hyper_2_7_chunk m2_3 (actual rows=2016 loops=1)
                           ->  Seq Scan on _hyper_2_8_chunk m2_4 (actual rows=6048 loops=1)
                           ->  Seq Scan on _hyper_2_9_chunk m2_5 (actual rows=2016 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m2_6 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_20_chunk compress_hyper_6_20_chunk_1 (actual rows=3 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_7 (actual rows=6048 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk compress_hyper_6_21_chunk_1 (actual rows=9 loops=1)
                           ->  Seq Scan on _hyper_2_12_chunk m2_8 (actual rows=2016 loops=1)
(38 rows)

:PREFIX SELECT * FROM :TEST_TABLE m1 LEFT OUTER JOIN :TEST_TABLE m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Sort (actual rows=100 loops=1)
         Sort Key: m1."time", m1.device_id, m2."time", m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=5472 loops=1)
               Hash Cond: (m1."time" = m2."time")
               Join Filter: (m1.device_id = 1)
               ->  Append (actual rows=5472 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m1_1 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_2 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
               ->  Hash (actual rows=5472 loops=1)
                     Buckets: 8192 (originally 4096)  Batches: 1 (originally 1) 
                     ->  Append (actual rows=5472 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                           ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk m2_1 (actual rows=2016 loops=1)
                                 Index Cond: (device_id = 2)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_2 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 6
(26 rows)

:PREFIX SELECT * FROM metrics m1 LEFT OUTER JOIN metrics_space m2 ON m1.time = m2.time AND m1.device_id=1 AND m2.device_id=2 ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 100;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Sort (actual rows=100 loops=1)
         Sort Key: m1."time", m1.device_id, m2."time", m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Left Join (actual rows=27360 loops=1)
               Hash Cond: (m1."time" = m2."time")
               Join Filter: (m1.device_id = 1)
               Rows Removed by Join Filter: 21888
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk m1 (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk m1_1 (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk m1_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_5_16_chunk (actual rows=15 loops=1)
               ->  Hash (actual rows=5472 loops=1)
                     Buckets: 8192 (originally 4096)  Batches: 1 (originally 1) 
                     ->  Append (actual rows=5472 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=2 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 4
                           ->  Index Scan using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk m2_1 (actual rows=2016 loops=1)
                                 Index Cond: (device_id = 2)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_2 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=3 loops=1)
                                       Filter: (device_id = 2)
                                       Rows Removed by Filter: 6
(27 rows)

-- test implicit self-join
:PREFIX SELECT * FROM :TEST_TABLE m1, :TEST_TABLE m2 WHERE m1.time = m2.time ORDER BY m1.time, m1.device_id, m2.time, m2.device_id LIMIT 20;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=20 loops=1)
   ->  Sort (actual rows=20 loops=1)
         Sort Key: m1."time", m1.device_id, m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=136800 loops=1)
               Hash Cond: (m1."time" = m2."time")
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_1 (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m1_3 (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk m1_4 (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk m1_5 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_6 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_7 (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk m1_8 (actual rows=2016 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_17_chunk compress_hyper_6_17_chunk_1 (actual rows=2 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=4320 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk compress_hyper_6_18_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m2_2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_1 (actual rows=2 loops=1)
                           ->  Seq Scan on _hyper_2_7_chunk m2_3 (actual rows=2016 loops=1)
                           ->  Seq Scan on _hyper_2_8_chunk m2_4 (actual rows=6048 loops=1)
                           ->  Seq Scan on _hyper_2_9_chunk m2_5 (actual rows=2016 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m2_6 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_20_chunk compress_hyper_6_20_chunk_1 (actual rows=3 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_7 (actual rows=6048 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk compress_hyper_6_21_chunk_1 (actual rows=9 loops=1)
                           ->  Seq Scan on _hyper_2_12_chunk m2_8 (actual rows=2016 loops=1)
(38 rows)

-- test self-join with sub-query
:PREFIX SELECT * FROM (SELECT * FROM :TEST_TABLE m1) m1 INNER JOIN (SELECT * FROM :TEST_TABLE m2) m2 ON m1.time = m2.time ORDER BY m1.time, m1.device_id, m2.device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: m1."time", m1.device_id, m2.device_id
         Sort Method: top-N heapsort 
         ->  Hash Join (actual rows=136800 loops=1)
               Hash Cond: (m1."time" = m2."time")
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_1 (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_2 (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_6_19_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk m1_3 (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk m1_4 (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk m1_5 (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_6 (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_7 (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk m1_8 (actual rows=2016 loops=1)
               ->  Hash (actual rows=27360 loops=1)
                     Buckets: 65536  Batches: 1 
                     ->  Append (actual rows=27360 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_17_chunk compress_hyper_6_17_chunk_1 (actual rows=2 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m2_1 (actual rows=4320 loops=1)
                                 ->  Seq Scan on compress_hyper_6_18_chunk compress_hyper_6_18_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m2_2 (actual rows=1440 loops=1)
                                 ->  Seq Scan on compress_hyper_6_19_chunk compress_hyper_6_19_chunk_1 (actual rows=2 loops=1)
                           ->  Seq Scan on _hyper_2_7_chunk m2_3 (actual rows=2016 loops=1)
                           ->  Seq Scan on _hyper_2_8_chunk m2_4 (actual rows=6048 loops=1)
                           ->  Seq Scan on _hyper_2_9_chunk m2_5 (actual rows=2016 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m2_6 (actual rows=2016 loops=1)
                                 ->  Seq Scan on compress_hyper_6_20_chunk compress_hyper_6_20_chunk_1 (actual rows=3 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m2_7 (actual rows=6048 loops=1)
                                 ->  Seq Scan on compress_hyper_6_21_chunk compress_hyper_6_21_chunk_1 (actual rows=9 loops=1)
                           ->  Seq Scan on _hyper_2_12_chunk m2_8 (actual rows=2016 loops=1)
(38 rows)

:PREFIX SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) g(time) INNER JOIN LATERAL(SELECT time FROM :TEST_TABLE m1 WHERE m1.time = g.time LIMIT 1) m1 ON true;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics_space m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 7
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1_1 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=1 loops=2)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_2 (never executed)
                     Filter: ("time" = g."time")
                     ->  Seq Scan on compress_hyper_6_18_chunk (never executed)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk m1_3 (never executed)
                     Filter: ("time" = g."time")
                     ->  Seq Scan on compress_hyper_6_19_chunk (never executed)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk m1_4 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 7
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk m1_5 (never executed)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk m1_6 (never executed)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 0
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_7 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=1 loops=2)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_8 (never executed)
                     Filter: ("time" = g."time")
                     ->  Seq Scan on compress_hyper_6_21_chunk (never executed)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk m1_9 (never executed)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 0
(41 rows)

-- test prepared statement with params pushdown
PREPARE param_prep(int) AS SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) g(time) INNER JOIN LATERAL(SELECT time FROM :TEST_TABLE m1 WHERE m1.time = g.time AND device_id = $1 LIMIT 1) m1 ON true;
:PREFIX EXECUTE param_prep(1);
                                                                                                                                      QUERY PLAN                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics_space m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk m1_1 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_6_20_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk m1_2 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_6_17_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk m1_3 (actual rows=1 loops=7)
                     Index Cond: ((device_id = 1) AND ("time" = g."time"))
                     Heap Fetches: 7
(20 rows)

:PREFIX EXECUTE param_prep(2);
                                                                                                                                      QUERY PLAN                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=19 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics_space m1 (actual rows=1 loops=32)
               Chunks excluded during runtime: 2
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk m1_1 (actual rows=1 loops=7)
                     Index Cond: ((device_id = 2) AND ("time" = g."time"))
                     Heap Fetches: 7
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk m1_2 (actual rows=1 loops=7)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 260
                     ->  Seq Scan on compress_hyper_6_21_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 2) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk m1_3 (actual rows=1 loops=5)
                     Filter: ("time" = g."time")
                     Rows Removed by Filter: 249
                     ->  Seq Scan on compress_hyper_6_18_chunk (actual rows=1 loops=2)
                           Filter: ((device_id = 2) AND (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= g."time") AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= g."time"))
                           Rows Removed by Filter: 0
(20 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(2);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(2);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

EXECUTE param_prep(1);
             time             |             time             
------------------------------+------------------------------
 Sat Jan 01 00:00:00 2000 PST | Sat Jan 01 00:00:00 2000 PST
 Sun Jan 02 00:00:00 2000 PST | Sun Jan 02 00:00:00 2000 PST
 Mon Jan 03 00:00:00 2000 PST | Mon Jan 03 00:00:00 2000 PST
 Tue Jan 04 00:00:00 2000 PST | Tue Jan 04 00:00:00 2000 PST
 Wed Jan 05 00:00:00 2000 PST | Wed Jan 05 00:00:00 2000 PST
 Thu Jan 06 00:00:00 2000 PST | Thu Jan 06 00:00:00 2000 PST
 Fri Jan 07 00:00:00 2000 PST | Fri Jan 07 00:00:00 2000 PST
 Sat Jan 08 00:00:00 2000 PST | Sat Jan 08 00:00:00 2000 PST
 Sun Jan 09 00:00:00 2000 PST | Sun Jan 09 00:00:00 2000 PST
 Mon Jan 10 00:00:00 2000 PST | Mon Jan 10 00:00:00 2000 PST
 Tue Jan 11 00:00:00 2000 PST | Tue Jan 11 00:00:00 2000 PST
 Wed Jan 12 00:00:00 2000 PST | Wed Jan 12 00:00:00 2000 PST
 Thu Jan 13 00:00:00 2000 PST | Thu Jan 13 00:00:00 2000 PST
 Fri Jan 14 00:00:00 2000 PST | Fri Jan 14 00:00:00 2000 PST
 Sat Jan 15 00:00:00 2000 PST | Sat Jan 15 00:00:00 2000 PST
 Sun Jan 16 00:00:00 2000 PST | Sun Jan 16 00:00:00 2000 PST
 Mon Jan 17 00:00:00 2000 PST | Mon Jan 17 00:00:00 2000 PST
 Tue Jan 18 00:00:00 2000 PST | Tue Jan 18 00:00:00 2000 PST
 Wed Jan 19 00:00:00 2000 PST | Wed Jan 19 00:00:00 2000 PST
(19 rows)

DEALLOCATE param_prep;
-- test continuous aggs
SET client_min_messages TO error;
CREATE VIEW cagg_test WITH (timescaledb.continuous) AS SELECT time_bucket('1d',time) AS time, device_id, avg(v1) FROM :TEST_TABLE WHERE device_id=1 GROUP BY 1,2;
REFRESH MATERIALIZED VIEW cagg_test;
psql:include/transparent_decompression_query.sql:267: INFO:  new materialization range for public.metrics_space (time column time) (948067200000000)
psql:include/transparent_decompression_query.sql:267: INFO:  materializing continuous aggregate public.cagg_test: new range up to 948067200000000
SELECT time FROM cagg_test ORDER BY time LIMIT 1;
             time             
------------------------------
 Fri Dec 31 16:00:00 1999 PST
(1 row)

DROP VIEW cagg_test CASCADE;
RESET client_min_messages;
\ir include/transparent_decompression_ordered.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
SET work_mem TO '50MB';
-- for ordered append tests on compressed chunks we need a hypertable with time as compress_orderby column
CREATE TABLE metrics_ordered(time timestamptz NOT NULL, device_id int, device_id_peer int, v0 int, v1 int, v2 float, v3 float);
SELECT create_hypertable('metrics_ordered','time');
       create_hypertable       
-------------------------------
 (11,public,metrics_ordered,t)
(1 row)

ALTER TABLE metrics_ordered SET (timescaledb.compress, timescaledb.compress_orderby='time DESC',timescaledb.compress_segmentby='device_id,device_id_peer');
psql:include/transparent_decompression_ordered.sql:10: NOTICE:  adding index _compressed_hypertable_12_device_id__ts_meta_sequence_num_idx ON _timescaledb_internal._compressed_hypertable_12 USING BTREE(device_id, _ts_meta_sequence_num)
psql:include/transparent_decompression_ordered.sql:10: NOTICE:  adding index _compressed_hypertable_12_device_id_peer__ts_meta_sequence__idx ON _timescaledb_internal._compressed_hypertable_12 USING BTREE(device_id_peer, _ts_meta_sequence_num)
INSERT INTO metrics_ordered SELECT * FROM metrics;
CREATE INDEX ON metrics_ordered(device_id,device_id_peer,time);
CREATE INDEX ON metrics_ordered(device_id,time);
CREATE INDEX ON metrics_ordered(device_id_peer,time);
-- compress all chunks
SELECT
  compress_chunk(c.schema_name || '.' || c.table_name)
FROM _timescaledb_catalog.chunk c
  INNER JOIN _timescaledb_catalog.hypertable ht ON c.hypertable_id=ht.id
WHERE ht.table_name = 'metrics_ordered'
ORDER BY c.id;
 compress_chunk 
----------------
 
 
 
(3 rows)

-- should not have ordered DecompressChunk path because segmentby columns are not part of pathkeys
:PREFIX SELECT * FROM metrics_ordered ORDER BY time DESC LIMIT 10;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_11_28_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_11_28_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_12_31_chunk (actual rows=15 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_11_27_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_12_30_chunk (actual rows=15 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_11_26_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_12_29_chunk (actual rows=10 loops=1)
(11 rows)

-- should have ordered DecompressChunk path because segmentby columns have equality constraints
:PREFIX SELECT * FROM metrics_ordered WHERE device_id = 1 AND device_id_peer = 3 ORDER BY time DESC LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_ordered (actual rows=0 loops=1)
         Order: metrics_ordered."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_11_28_chunk (actual rows=0 loops=1)
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: compress_hyper_12_31_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_12_31_chunk (actual rows=0 loops=1)
                           Filter: ((device_id = 1) AND (device_id_peer = 3))
                           Rows Removed by Filter: 15
         ->  Custom Scan (DecompressChunk) on _hyper_11_27_chunk (actual rows=0 loops=1)
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: compress_hyper_12_30_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_12_30_chunk (actual rows=0 loops=1)
                           Filter: ((device_id = 1) AND (device_id_peer = 3))
                           Rows Removed by Filter: 15
         ->  Custom Scan (DecompressChunk) on _hyper_11_26_chunk (actual rows=0 loops=1)
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: compress_hyper_12_29_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_12_29_chunk (actual rows=0 loops=1)
                           Filter: ((device_id = 1) AND (device_id_peer = 3))
                           Rows Removed by Filter: 10
(24 rows)

:PREFIX SELECT DISTINCT ON (d.device_id) * FROM metrics_ordered d INNER JOIN LATERAL (SELECT * FROM metrics_ordered m WHERE m.device_id=d.device_id AND m.device_id_peer = 3 ORDER BY time DESC LIMIT 1 ) m ON true;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Unique (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: d.device_id
         Sort Method: quicksort 
         ->  Nested Loop (actual rows=0 loops=1)
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_11_26_chunk d (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_12_29_chunk (actual rows=10 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_11_27_chunk d_1 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_12_30_chunk (actual rows=15 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_11_28_chunk d_2 (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_12_31_chunk (actual rows=15 loops=1)
               ->  Limit (actual rows=0 loops=27360)
                     ->  Custom Scan (ChunkAppend) on metrics_ordered m (actual rows=0 loops=27360)
                           Order: m."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_11_28_chunk m_1 (actual rows=0 loops=27360)
                                 ->  Sort (actual rows=0 loops=27360)
                                       Sort Key: compress_hyper_12_31_chunk_1._ts_meta_sequence_num
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_12_31_chunk compress_hyper_12_31_chunk_1 (actual rows=0 loops=27360)
                                             Filter: ((device_id = d.device_id) AND (device_id_peer = 3))
                                             Rows Removed by Filter: 15
                           ->  Custom Scan (DecompressChunk) on _hyper_11_27_chunk m_2 (actual rows=0 loops=27360)
                                 ->  Sort (actual rows=0 loops=27360)
                                       Sort Key: compress_hyper_12_30_chunk_1._ts_meta_sequence_num
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_12_30_chunk compress_hyper_12_30_chunk_1 (actual rows=0 loops=27360)
                                             Filter: ((device_id = d.device_id) AND (device_id_peer = 3))
                                             Rows Removed by Filter: 15
                           ->  Custom Scan (DecompressChunk) on _hyper_11_26_chunk m_3 (actual rows=0 loops=27360)
                                 ->  Sort (actual rows=0 loops=27360)
                                       Sort Key: compress_hyper_12_29_chunk_1._ts_meta_sequence_num
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_12_29_chunk compress_hyper_12_29_chunk_1 (actual rows=0 loops=27360)
                                             Filter: ((device_id = d.device_id) AND (device_id_peer = 3))
                                             Rows Removed by Filter: 10
(36 rows)

\ir include/transparent_decompression_systemcolumns.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set TEST_TABLE 'metrics'
-- test system columns
-- all system columns except for tableoid should error
\set ON_ERROR_STOP 0
SELECT xmin FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:10: ERROR:  transparent decompression only supports tableoid system column
SELECT cmin FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:11: ERROR:  transparent decompression only supports tableoid system column
SELECT xmax FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:12: ERROR:  transparent decompression only supports tableoid system column
SELECT cmax FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:13: ERROR:  transparent decompression only supports tableoid system column
SELECT ctid FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:14: ERROR:  transparent decompression only supports tableoid system column
-- test system columns in WHERE and ORDER BY clause
SELECT tableoid, xmin FROM :TEST_TABLE ORDER BY time;
psql:include/transparent_decompression_systemcolumns.sql:17: ERROR:  transparent decompression only supports tableoid system column
SELECT FROM :TEST_TABLE ORDER BY cmin::text;
psql:include/transparent_decompression_systemcolumns.sql:18: ERROR:  transparent decompression only supports tableoid system column
SELECT FROM :TEST_TABLE WHERE cmin IS NOT NULL;
psql:include/transparent_decompression_systemcolumns.sql:19: ERROR:  transparent decompression only supports tableoid system column
\set ON_ERROR_STOP 1
-- test tableoid in different parts of query
SELECT pg_typeof(tableoid) FROM :TEST_TABLE ORDER BY time LIMIT 1;
 pg_typeof 
-----------
 oid
(1 row)

SELECT FROM :TEST_TABLE ORDER BY tableoid LIMIT 1;
--
(1 row)

SELECT FROM :TEST_TABLE WHERE tableoid::int > 0 LIMIT 1;
--
(1 row)

SELECT tableoid::regclass FROM :TEST_TABLE GROUP BY tableoid ORDER BY 1;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
 _timescaledb_internal._hyper_1_2_chunk
 _timescaledb_internal._hyper_1_3_chunk
(3 rows)

SELECT count(distinct tableoid) FROM :TEST_TABLE WHERE device_id=1 AND time < now();
 count 
-------
     3
(1 row)

-- test prepared statement
PREPARE tableoid_prep AS SELECT tableoid::regclass FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time LIMIT 1;
:PREFIX EXECUTE tableoid_prep;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=1 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_5_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_5_16_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

EXECUTE tableoid_prep;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

EXECUTE tableoid_prep;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

EXECUTE tableoid_prep;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

EXECUTE tableoid_prep;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

EXECUTE tableoid_prep;
                tableoid                
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

DEALLOCATE tableoid_prep;
-- run query with parallel enabled to ensure nothing is preventing parallel execution
-- this is just a sanity check, the result queries dont run with parallel disabled
SET max_parallel_workers_per_gather TO 4;
EXPLAIN (costs off) SELECT * FROM metrics ORDER BY time, device_id;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   ->  Append
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk
               ->  Seq Scan on compress_hyper_5_15_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk
               ->  Seq Scan on compress_hyper_5_16_chunk
(8 rows)

EXPLAIN (costs off) SELECT * FROM metrics_space ORDER BY time, device_id;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   ->  Append
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk
               ->  Seq Scan on compress_hyper_6_17_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk
               ->  Seq Scan on compress_hyper_6_18_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk
               ->  Seq Scan on compress_hyper_6_19_chunk
         ->  Seq Scan on _hyper_2_7_chunk
         ->  Seq Scan on _hyper_2_8_chunk
         ->  Seq Scan on _hyper_2_9_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk
               ->  Seq Scan on compress_hyper_6_20_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk
               ->  Seq Scan on compress_hyper_6_21_chunk
         ->  Seq Scan on _hyper_2_12_chunk
(17 rows)

SET enable_seqscan TO false;
-- should order compressed chunks using index
-- (we only EXPLAIN here b/c the resulting order is too inconsistent)
EXPLAIN (costs off) SELECT * FROM metrics WHERE time > '2000-01-08' ORDER BY device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_2_chunk.device_id
   ->  Append
         ->  Index Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk
               Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan using compress_hyper_5_16_chunk_c_index_2 on compress_hyper_5_16_chunk
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(9 rows)

EXPLAIN (costs off) SELECT * FROM metrics_space WHERE time > '2000-01-08' ORDER BY device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: _hyper_2_8_chunk.device_id
   ->  Index Scan Backward using _hyper_2_8_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_8_chunk
         Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan Backward using _hyper_2_12_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_12_chunk
         Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Sort
         Sort Key: _hyper_2_10_chunk.device_id
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan using compress_hyper_6_20_chunk_c_space_index_2 on compress_hyper_6_20_chunk
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Sort
         Sort Key: _hyper_2_11_chunk.device_id
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan using compress_hyper_6_21_chunk_c_space_index_2 on compress_hyper_6_21_chunk
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan Backward using _hyper_2_9_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_9_chunk
         Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Scan Backward using _hyper_2_7_chunk_device_id_device_id_peer_v0_v1_time_idx2 on _hyper_2_7_chunk
         Index Cond: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(22 rows)

SET enable_seqscan TO true;
-- diff compressed and uncompressed results
:DIFF_CMD
