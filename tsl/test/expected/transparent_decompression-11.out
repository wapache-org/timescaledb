-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set TEST_BASE_NAME transparent_decompression
SELECT format('include/%s_load.sql', :'TEST_BASE_NAME') as "TEST_LOAD_NAME",
       format('include/%s_query.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/results/%s_results_uncompressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNCOMPRESSED",
       format('%s/results/%s_results_compressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_COMPRESSED"
\gset
SELECT format('\! diff %s %s', :'TEST_RESULTS_UNCOMPRESSED', :'TEST_RESULTS_COMPRESSED') as "DIFF_CMD"
\gset
SET work_mem TO '50MB';
CREATE TABLE metrics(filler_1 int, filler_2 int, filler_3 int, time timestamptz NOT NULL, device_id int, device_id_peer int, v0 int, v1 int, v2 float, v3 float);
SELECT create_hypertable('metrics','time');
  create_hypertable   
----------------------
 (1,public,metrics,t)
(1 row)

ALTER TABLE metrics DROP COLUMN filler_1;
INSERT INTO metrics(time,device_id, device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1,  device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-01 0:00:00+0'::timestamptz,'2000-01-05 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics DROP COLUMN filler_2;
INSERT INTO metrics(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id-1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-06 0:00:00+0'::timestamptz,'2000-01-12 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics DROP COLUMN filler_3;
INSERT INTO metrics(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-13 0:00:00+0'::timestamptz,'2000-01-19 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ANALYZE metrics;
-- create identical hypertable with space partitioning
CREATE TABLE metrics_space(filler_1 int, filler_2 int, filler_3 int, time timestamptz NOT NULL, device_id int, device_id_peer int, v0 int, v1 float, v2 float, v3 float);
SELECT create_hypertable('metrics_space','time','device_id',3);
     create_hypertable      
----------------------------
 (2,public,metrics_space,t)
(1 row)

ALTER TABLE metrics_space DROP COLUMN filler_1;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-01 0:00:00+0'::timestamptz,'2000-01-05 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics_space DROP COLUMN filler_2;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-06 0:00:00+0'::timestamptz,'2000-01-12 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ALTER TABLE metrics_space DROP COLUMN filler_3;
INSERT INTO metrics_space(time,device_id,device_id_peer,v0,v1,v2,v3) SELECT time, device_id, 0, device_id+1, device_id + 2, device_id + 0.5, NULL FROM generate_series('2000-01-13 0:00:00+0'::timestamptz,'2000-01-19 23:55:00+0','5m') gtime(time), generate_series(1,5,1) gdevice(device_id);
ANALYZE metrics_space;
-- run queries on uncompressed hypertable and store result
\set PREFIX ''
\set ECHO none
-- compress first and last chunk on the hypertable
ALTER TABLE metrics SET (timescaledb.compress, timescaledb.compress_orderby='v0, v1 desc, time', timescaledb.compress_segmentby='device_id,device_id_peer');
SELECT compress_chunk('_timescaledb_internal._hyper_1_1_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_1_3_chunk');
 compress_chunk 
----------------
 
(1 row)

-- compress some chunks on space partitioned hypertable
-- we compress all chunks of first time slice, none of second, and 2 of the last time slice
ALTER TABLE metrics_space SET (timescaledb.compress, timescaledb.compress_orderby='v0, v1 desc, time', timescaledb.compress_segmentby='device_id,device_id_peer');
SELECT compress_chunk('_timescaledb_internal._hyper_2_4_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_5_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_6_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_10_chunk');
 compress_chunk 
----------------
 
(1 row)

SELECT compress_chunk('_timescaledb_internal._hyper_2_11_chunk');
 compress_chunk 
----------------
 
(1 row)

-- run queries on compressed hypertable and store result
\set PREFIX ''
\set ECHO none
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX"
\gset
-- we disable parallelism here otherwise EXPLAIN ANALYZE output
-- will be not stable and differ depending on worker assignment
SET max_parallel_workers_per_gather TO 0;
-- get explain for queries on hypertable with compression
\set TEST_TABLE 'metrics'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- this should use DecompressChunk node
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time LIMIT 5;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=5 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=5 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

-- test RECORD by itself
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics (actual rows=5472 loops=1)
   Order: metrics."time"
   ->  Sort (actual rows=1440 loops=1)
         Sort Key: _hyper_1_1_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
   ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
         Rows Removed by Filter: 8064
   ->  Sort (actual rows=2016 loops=1)
         Sort Key: _hyper_1_3_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(19 rows)

-- test expressions
:PREFIX SELECT
  time_bucket('1d',time),
  v1 + v2 AS "sum",
  COALESCE(NULL,v1,v2) AS "coalesce",
  NULL AS "NULL",
  'text' AS "text",
  :TEST_TABLE AS "RECORD"
FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort (actual rows=10944 loops=1)
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  Result (actual rows=10944 loops=1)
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=2880 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=4 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=4032 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 6048
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=4032 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=6 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 9
(16 rows)

-- test empty targetlist
:PREFIX SELECT FROM :TEST_TABLE;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=27360 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
         ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
         ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(6 rows)

-- test empty resultset
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < 0;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 10
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
         Filter: (device_id < 0)
         Rows Removed by Filter: 10080
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 15
(12 rows)

-- test targetlist not referencing columns
:PREFIX SELECT 1 FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Result (actual rows=27360 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(7 rows)

-- test constraints not present in targetlist
:PREFIX SELECT v1 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(15 rows)

-- test order not present in targetlist
:PREFIX SELECT v2 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_1_1_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(15 rows)

-- test column with all NULL
:PREFIX SELECT v3 FROM :TEST_TABLE WHERE device_id = 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8
   ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
         Rows Removed by Filter: 8064
   ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 12
(12 rows)

--
-- test qual pushdown
--
-- v3 is not segment by or order by column so should not be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE v3 > 10.0 ORDER BY time, device_id;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 7200
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 10080
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 10080
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(15 rows)

-- device_id constraint should be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

-- test IS NULL / IS NOT NULL
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NOT NULL ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                           Filter: (device_id IS NOT NULL)
(13 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NULL ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id IS NULL)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 15
(16 rows)

-- test IN (Const,Const)
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=2880 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=4 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=4032 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 6048
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=4032 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=6 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 9
(16 rows)

-- test cast pushdown
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = '1'::text::int ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
                           Filter: (device_id = 1)
(17 rows)

--test var op var with two segment by
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = device_id_peer ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 15
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id_peer < device_id ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                           Filter: (device_id_peer < device_id)
(13 rows)

-- test expressions
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id =  1 + 4/2 ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 3)
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = 3)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
                           Filter: (device_id = 3)
(17 rows)

-- test function calls
-- not yet pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = length(substring(version(),1,3)) ORDER BY time, device_id LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 0
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
                     Rows Removed by Filter: 5760
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Filter: (device_id = length("substring"(version(), 1, 3)))
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
(18 rows)

--
-- test segment meta pushdown
--
-- order by column and const
:PREFIX SELECT * FROM :TEST_TABLE WHERE time = '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Sort (actual rows=5 loops=1)
         Sort Key: _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=5 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=5 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4995
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=5 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time < '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=60 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=60 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4940
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=5 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time <= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=65 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=65 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4935
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=5 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(11 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time >= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27300 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7140 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 60
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7135 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 65
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE '2000-01-01 1:00:00+0' < time ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7135 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 65
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(16 rows)

--pushdowns between order by and segment by columns
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 8064
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 15
(18 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < device_id ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (v0 < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 15
(17 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < v0 ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=7200 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (device_id < v0)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
                           Rows Removed by Filter: 15
(17 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v1 = device_id ORDER BY time, device_id LIMIT 10;
                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=0 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_2, NULL::integer) <= device_id) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_2, NULL::integer) >= device_id))
                           Rows Removed by Filter: 10
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v1 = device_id)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=0 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_2, NULL::integer) <= device_id) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_2, NULL::integer) >= device_id))
                           Rows Removed by Filter: 15
(18 rows)

--pushdown between two order by column (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 = v1 ORDER BY time, device_id LIMIT 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 7200
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 10080
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=0 loops=1)
                     Filter: (v0 = v1)
                     Rows Removed by Filter: 10080
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(16 rows)

--pushdown of quals on order by and segment by cols anded together
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' and device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=10 loops=1)
         Order: metrics."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_1_1_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 8
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Index Cond: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_1_3_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (never executed)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_3_14_chunk (never executed)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
(21 rows)

--pushdown of quals on order by and segment by cols or together (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' or device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27308 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7148 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 52
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(14 rows)

--functions not yet optimized
:PREFIX SELECT * FROM :TEST_TABLE WHERE time < now() ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: metrics."time", metrics.device_id
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics (actual rows=27360 loops=1)
               Chunks excluded during startup: 0
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     Filter: ("time" < now())
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     Filter: ("time" < now())
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     Filter: ("time" < now())
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(14 rows)

--
-- test constraint exclusion
--
-- test plan time exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=6715 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(11 rows)

-- test runtime exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08'::text::timestamptz ORDER BY time, device_id;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: metrics."time", metrics.device_id
   Sort Method: quicksort 
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=16795 loops=1)
         Chunks excluded during startup: 1
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=6715 loops=1)
               Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               Rows Removed by Filter: 3365
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(11 rows)

-- test aggregate
:PREFIX SELECT count(*) FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(7 rows)

-- test aggregate with GROUP BY
:PREFIX SELECT count(*) FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  HashAggregate (actual rows=5 loops=1)
         Group Key: _hyper_1_1_chunk.device_id
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                     ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                     ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(11 rows)

-- test window functions with GROUP BY
:PREFIX SELECT sum(count(*)) OVER () FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_1_1_chunk.device_id
   Sort Method: quicksort 
   ->  WindowAgg (actual rows=5 loops=1)
         ->  HashAggregate (actual rows=5 loops=1)
               Group Key: _hyper_1_1_chunk.device_id
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                           ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                           ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
(12 rows)

-- test CTE
:PREFIX WITH
q AS (SELECT v1 FROM :TEST_TABLE ORDER BY time)
SELECT * FROM q ORDER BY v1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=27360 loops=1)
   Sort Key: q.v1
   Sort Method: quicksort 
   CTE q
     ->  Custom Scan (ChunkAppend) on metrics (actual rows=27360 loops=1)
           Order: metrics."time"
           ->  Sort (actual rows=7200 loops=1)
                 Sort Key: _hyper_1_1_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=7200 loops=1)
                       ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=10 loops=1)
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=10080 loops=1)
           ->  Sort (actual rows=10080 loops=1)
                 Sort Key: _hyper_1_3_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=10080 loops=1)
                       ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=15 loops=1)
   ->  CTE Scan on q (actual rows=27360 loops=1)
(18 rows)

-- test CTE join
:PREFIX WITH
q1 AS (SELECT time, v1 FROM :TEST_TABLE WHERE device_id=1 ORDER BY time),
q2 AS (SELECT time, v2 FROM :TEST_TABLE WHERE device_id=2 ORDER BY time)
SELECT * FROM q1 INNER JOIN q2 ON q1.time=q2.time ORDER BY q1.time;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=5472 loops=1)
   Merge Cond: (q1."time" = q2."time")
   CTE q1
     ->  Custom Scan (ChunkAppend) on metrics (actual rows=5472 loops=1)
           Order: metrics."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_1_1_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 1)
                             Rows Removed by Filter: 8
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=2016 loops=1)
                 Filter: (device_id = 1)
                 Rows Removed by Filter: 8064
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_1_3_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 1)
                             Rows Removed by Filter: 12
   CTE q2
     ->  Custom Scan (ChunkAppend) on metrics metrics_1 (actual rows=5472 loops=1)
           Order: metrics_1."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_1_1_chunk_1."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk _hyper_1_1_chunk_1 (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_3_13_chunk compress_hyper_3_13_chunk_1 (actual rows=2 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 8
           ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk _hyper_1_2_chunk_1 (actual rows=2016 loops=1)
                 Filter: (device_id = 2)
                 Rows Removed by Filter: 8064
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_1_3_chunk_1."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk _hyper_1_3_chunk_1 (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_3_14_chunk compress_hyper_3_14_chunk_1 (actual rows=3 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 12
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q1."time"
         Sort Method: quicksort 
         ->  CTE Scan on q1 (actual rows=5472 loops=1)
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q2."time"
         Sort Method: quicksort 
         ->  CTE Scan on q2 (actual rows=5472 loops=1)
(50 rows)

-- test prepared statement
PREPARE prep AS SELECT count(time) FROM :TEST_TABLE WHERE device_id = 1;
:PREFIX EXECUTE prep;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_3_13_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 8
         ->  Seq Scan on _hyper_1_2_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
               Rows Removed by Filter: 8064
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_3_14_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
                     Rows Removed by Filter: 12
(13 rows)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

DEALLOCATE prep;
-- test explicit self-join
-- XXX FIXME
-- :PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time ORDER BY m1.time;
-- test implicit self-join
-- XXX FIXME
-- :PREFIX SELECT * FROM :TEST_TABLE m1, :TEST_TABLE m2 WHERE m1.time = m2.time ORDER BY m1.time;
-- test self-join with sub-query
-- XXX FIXME
-- :PREFIX SELECT * FROM (SELECT * FROM :TEST_TABLE m1) m1 INNER JOIN (SELECT * FROM :TEST_TABLE m2) m2 ON m1.time = m2.time ORDER BY m1.time;
-- test system columns
-- XXX FIXME
--SELECT xmin FROM :TEST_TABLE ORDER BY time;
\set TEST_TABLE 'metrics_space'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- this should use DecompressChunk node
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time LIMIT 5;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=5 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=5 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

-- test RECORD by itself
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=5472 loops=1)
   Order: metrics_space."time"
   ->  Sort (actual rows=1440 loops=1)
         Sort Key: _hyper_2_4_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
   ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
   ->  Sort (actual rows=2016 loops=1)
         Sort Key: _hyper_2_10_chunk."time"
         Sort Method: quicksort 
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
(16 rows)

-- test expressions
:PREFIX SELECT
  time_bucket('1d',time),
  v1 + v2 AS "sum",
  COALESCE(NULL,v1,v2) AS "coalesce",
  NULL AS "NULL",
  'text' AS "text",
  :TEST_TABLE AS "RECORD"
FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=10944 loops=1)
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  Result (actual rows=10944 loops=1)
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 4
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 4032
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
(24 rows)

-- test empty targetlist
:PREFIX SELECT FROM :TEST_TABLE;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=27360 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
         ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
   ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
   ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
   ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
   ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(15 rows)

-- test empty resultset
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < 0;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 2
   ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 6
   ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 2
   ->  Index Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Index Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Index Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 3
   ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
         ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=0 loops=1)
               Filter: (device_id < 0)
               Rows Removed by Filter: 9
   ->  Index Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (actual rows=0 loops=1)
         Index Cond: (device_id < 0)
(29 rows)

-- test targetlist not referencing columns
:PREFIX SELECT 1 FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Result (actual rows=27360 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(16 rows)

-- test constraints not present in targetlist
:PREFIX SELECT v1 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(12 rows)

-- test order not present in targetlist
:PREFIX SELECT v2 FROM :TEST_TABLE WHERE device_id = 1 ORDER BY v1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=5472 loops=1)
   Sort Key: _hyper_2_10_chunk.v1
   Sort Method: quicksort 
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(12 rows)

-- test column with all NULL
:PREFIX SELECT v3 FROM :TEST_TABLE WHERE device_id = 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Append (actual rows=5472 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               Filter: (device_id = 1)
   ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
         ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               Filter: (device_id = 1)
   ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         Filter: (device_id = 1)
(9 rows)

--
-- test qual pushdown
--
-- v3 is not segment by or order by column so should not be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE v3 > 10.0 ORDER BY time, device_id;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort (actual rows=0 loops=1)
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 1440
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 4320
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 1440
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 2016
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 6048
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 2016
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 2016
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 6048
               ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
               Filter: (v3 > '10'::double precision)
               Rows Removed by Filter: 2016
(36 rows)

-- device_id constraint should be pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

-- test IS NULL / IS NOT NULL
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NOT NULL ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (device_id IS NOT NULL)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id IS NOT NULL)
(28 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IS NULL ORDER BY time, device_id LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 2
               ->  Index Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Index Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Index Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=0 loops=1)
                           Filter: (device_id IS NULL)
                           Rows Removed by Filter: 9
               ->  Index Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Index Cond: (device_id IS NULL)
(33 rows)

-- test IN (Const,Const)
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id IN (1,2) ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=10944 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=2 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 4
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=2016 loops=1)
                     Filter: (device_id = ANY ('{1,2}'::integer[]))
                     Rows Removed by Filter: 4032
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=3 loops=1)
                           Filter: (device_id = ANY ('{1,2}'::integer[]))
                           Rows Removed by Filter: 6
(24 rows)

-- test cast pushdown
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = '1'::text::int ORDER BY time, device_id LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
                           Filter: (device_id = 1)
(16 rows)

--test var op var with two segment by
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = device_id_peer ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 2
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=0 loops=1)
                           Filter: (device_id = device_id_peer)
                           Rows Removed by Filter: 9
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (device_id = device_id_peer)
                     Rows Removed by Filter: 2016
(37 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id_peer < device_id ORDER BY time, device_id LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (device_id_peer < device_id)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id_peer < device_id)
(28 rows)

-- test expressions
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id =  1 + 4/2 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_6_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (device_id = 3)
         ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
               Filter: (device_id = 3)
         ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
               Filter: (device_id = 3)
(13 rows)

-- test function calls
-- not yet pushed down
:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id = length(substring(version(),1,3)) ORDER BY time, device_id LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: _hyper_2_4_chunk."time"
                     Sort Method: quicksort 
                     ->  Sort (actual rows=0 loops=1)
                           Sort Key: _hyper_2_4_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 Rows Removed by Filter: 1440
                                 ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Sort (actual rows=0 loops=1)
                     Sort Key: _hyper_2_5_chunk."time"
                     Sort Method: quicksort 
                     ->  Sort (actual rows=0 loops=1)
                           Sort Key: _hyper_2_5_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 Rows Removed by Filter: 4320
                                 ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Sort (actual rows=10 loops=1)
                     Sort Key: _hyper_2_6_chunk."time"
                     Sort Method: top-N heapsort 
                     ->  Sort (actual rows=1440 loops=1)
                           Sort Key: _hyper_2_6_chunk."time"
                           Sort Method: quicksort 
                           ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
               ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (never executed)
                     Index Cond: (device_id = length("substring"(version(), 1, 3)))
               ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Sort (never executed)
                     Sort Key: _hyper_2_10_chunk."time"
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_10_chunk."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: _hyper_2_11_chunk."time"
                     ->  Sort (never executed)
                           Sort Key: _hyper_2_11_chunk."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (never executed)
                                 Filter: (device_id = length("substring"(version(), 1, 3)))
                                 ->  Seq Scan on compress_hyper_4_19_chunk (never executed)
               ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Filter: (device_id = length("substring"(version(), 1, 3)))
(60 rows)

--
-- test segment meta pushdown
--
-- order by column and const
:PREFIX SELECT * FROM :TEST_TABLE WHERE time = '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   ->  Sort (actual rows=5 loops=1)
         Sort Key: _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=5 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 999
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=1 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=3 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2997
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=3 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Filter: ("time" = 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 999
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=1 loops=1)
                           Filter: ((_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time < '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=60 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=12 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 988
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=36 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2964
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=12 loops=1)
                     Filter: ("time" < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 988
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) < 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time <= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=65 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=13 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 987
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=39 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2961
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=13 loops=1)
                     Filter: ("time" <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 987
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=1 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_3, NULL::timestamp with time zone) <= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
(23 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time >= '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27300 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1428 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 12
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4284 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 36
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1428 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 12
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" >= 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(36 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
(36 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE '2000-01-01 1:00:00+0' < time ORDER BY time, device_id LIMIT 10;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27295 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1427 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ('Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone < "time")
(36 rows)

--pushdowns between order by and segment by columns
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 2
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < 1)
                           Rows Removed by Filter: 9
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (v0 < 1)
                     Rows Removed by Filter: 2016
(42 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 < device_id ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 2
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 6
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 2
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=0 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_min(_ts_meta_min_max_1, NULL::integer) < device_id)
                           Rows Removed by Filter: 9
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (v0 < device_id)
                     Rows Removed by Filter: 2016
(42 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE device_id < v0 ORDER BY time, device_id LIMIT 10;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (device_id < v0)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: (device_id < v0)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                           Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_1, NULL::integer) > device_id)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (device_id < v0)
(33 rows)

:PREFIX SELECT * FROM :TEST_TABLE WHERE v1 = device_id ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 6048
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: (v1 = (device_id)::double precision)
                     Rows Removed by Filter: 2016
(37 rows)

--pushdown between two order by column (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE v0 = v1 ORDER BY time, device_id LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: quicksort 
         ->  Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 6048
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 6048
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=0 loops=1)
                     Filter: ((v0)::double precision = v1)
                     Rows Removed by Filter: 2016
(37 rows)

--pushdown of quals on order by and segment by cols anded together
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' and device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=10 loops=1)
         Order: metrics_space."time"
         ->  Sort (actual rows=10 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1427 loops=1)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Index Cond: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
               Filter: (device_id = 1)
         ->  Sort (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (never executed)
                     Filter: ("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
                           Filter: ((device_id = 1) AND (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone))
(20 rows)

--pushdown of quals on order by and segment by cols or together (not pushed down)
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-01 1:00:00+0' or device_id = 1 ORDER BY time, device_id LIMIT 10;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=27308 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4281 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 39
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1427 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     Rows Removed by Filter: 13
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: (("time" > 'Fri Dec 31 17:00:00 1999 PST'::timestamp with time zone) OR (device_id = 1))
(30 rows)

--functions not yet optimized
:PREFIX SELECT * FROM :TEST_TABLE WHERE time < now() ORDER BY time, device_id LIMIT 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Sort (actual rows=10 loops=1)
         Sort Key: metrics_space."time", metrics_space.device_id
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=27360 loops=1)
               ->  Merge Append (actual rows=7200 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
               ->  Merge Append (actual rows=10080 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                           Filter: ("time" < now())
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
               ->  Merge Append (actual rows=10080 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                           Filter: ("time" < now())
                           ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                           Filter: ("time" < now())
(31 rows)

--
-- test constraint exclusion
--
-- test plan time exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08' ORDER BY time, device_id;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: _hyper_2_7_chunk."time", _hyper_2_7_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=16795 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=1343 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=4029 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 2019
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=1343 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 673
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                     Filter: (_timescaledb_internal.segment_meta_get_max(_ts_meta_min_max_3, NULL::timestamp with time zone) > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
               Filter: ("time" > 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
(23 rows)

-- test runtime exclusion
-- first chunk should be excluded
:PREFIX SELECT * FROM :TEST_TABLE WHERE time > '2000-01-08'::text::timestamptz ORDER BY time, device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=16795 loops=1)
   Sort Key: metrics_space."time", metrics_space.device_id
   Sort Method: quicksort 
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=16795 loops=1)
         ->  Merge Append (actual rows=0 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 4320
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 1440
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
         ->  Merge Append (actual rows=6715 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=1343 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 673
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=4029 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 2019
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=1343 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 673
         ->  Merge Append (actual rows=10080 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
(36 rows)

-- test aggregate
:PREFIX SELECT count(*) FROM :TEST_TABLE;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=27360 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
         ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
         ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
         ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(16 rows)

-- test aggregate with GROUP BY
:PREFIX SELECT count(*) FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  HashAggregate (actual rows=5 loops=1)
         Group Key: _hyper_2_4_chunk.device_id
         ->  Append (actual rows=27360 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(20 rows)

-- test window functions with GROUP BY
:PREFIX SELECT sum(count(*)) OVER () FROM :TEST_TABLE GROUP BY device_id ORDER BY device_id;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: _hyper_2_4_chunk.device_id
   Sort Method: quicksort 
   ->  WindowAgg (actual rows=5 loops=1)
         ->  HashAggregate (actual rows=5 loops=1)
               Group Key: _hyper_2_4_chunk.device_id
               ->  Append (actual rows=27360 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=6048 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=2016 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                           ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=2016 loops=1)
(21 rows)

-- test CTE
:PREFIX WITH
q AS (SELECT v1 FROM :TEST_TABLE ORDER BY time)
SELECT * FROM q ORDER BY v1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=27360 loops=1)
   Sort Key: q.v1
   Sort Method: quicksort 
   CTE q
     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=27360 loops=1)
           Order: metrics_space."time"
           ->  Merge Append (actual rows=7200 loops=1)
                 Sort Key: _hyper_2_4_chunk."time"
                 ->  Sort (actual rows=1440 loops=1)
                       Sort Key: _hyper_2_4_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=1440 loops=1)
                             Sort Key: _hyper_2_4_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                                   ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                 ->  Sort (actual rows=4320 loops=1)
                       Sort Key: _hyper_2_5_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=4320 loops=1)
                             Sort Key: _hyper_2_5_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=4320 loops=1)
                                   ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=6 loops=1)
                 ->  Sort (actual rows=1440 loops=1)
                       Sort Key: _hyper_2_6_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=1440 loops=1)
                             Sort Key: _hyper_2_6_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk (actual rows=1440 loops=1)
                                   ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=2 loops=1)
           ->  Merge Append (actual rows=10080 loops=1)
                 Sort Key: _hyper_2_7_chunk."time"
                 ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
                 ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=6048 loops=1)
                 ->  Index Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=2016 loops=1)
           ->  Merge Append (actual rows=10080 loops=1)
                 Sort Key: _hyper_2_10_chunk."time"
                 ->  Sort (actual rows=2016 loops=1)
                       Sort Key: _hyper_2_10_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=2016 loops=1)
                             Sort Key: _hyper_2_10_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                                   ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                 ->  Sort (actual rows=6048 loops=1)
                       Sort Key: _hyper_2_11_chunk."time"
                       Sort Method: quicksort 
                       ->  Sort (actual rows=6048 loops=1)
                             Sort Key: _hyper_2_11_chunk."time"
                             Sort Method: quicksort 
                             ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=6048 loops=1)
                                   ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=9 loops=1)
                 ->  Index Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=2016 loops=1)
   ->  CTE Scan on q (actual rows=27360 loops=1)
(57 rows)

-- test CTE join
:PREFIX WITH
q1 AS (SELECT time, v1 FROM :TEST_TABLE WHERE device_id=1 ORDER BY time),
q2 AS (SELECT time, v2 FROM :TEST_TABLE WHERE device_id=2 ORDER BY time)
SELECT * FROM q1 INNER JOIN q2 ON q1.time=q2.time ORDER BY q1.time;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=5472 loops=1)
   Merge Cond: (q1."time" = q2."time")
   CTE q1
     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=5472 loops=1)
           Order: metrics_space."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_2_4_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 1)
           ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=2016 loops=1)
                 Filter: (device_id = 1)
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_2_10_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 1)
   CTE q2
     ->  Custom Scan (ChunkAppend) on metrics_space metrics_space_1 (actual rows=5472 loops=1)
           Order: metrics_space_1."time"
           ->  Sort (actual rows=1440 loops=1)
                 Sort Key: _hyper_2_5_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk (actual rows=1440 loops=1)
                       ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=2 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 4
           ->  Index Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=2016 loops=1)
                 Filter: (device_id = 2)
                 Rows Removed by Filter: 4032
           ->  Sort (actual rows=2016 loops=1)
                 Sort Key: _hyper_2_11_chunk."time"
                 Sort Method: quicksort 
                 ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk (actual rows=2016 loops=1)
                       ->  Seq Scan on compress_hyper_4_19_chunk (actual rows=3 loops=1)
                             Filter: (device_id = 2)
                             Rows Removed by Filter: 6
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q1."time"
         Sort Method: quicksort 
         ->  CTE Scan on q1 (actual rows=5472 loops=1)
   ->  Sort (actual rows=5472 loops=1)
         Sort Key: q2."time"
         Sort Method: quicksort 
         ->  CTE Scan on q2 (actual rows=5472 loops=1)
(47 rows)

-- test prepared statement
PREPARE prep AS SELECT count(time) FROM :TEST_TABLE WHERE device_id = 1;
:PREFIX EXECUTE prep;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=5472 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk (actual rows=2016 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=3 loops=1)
                     Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk (actual rows=1440 loops=1)
               ->  Seq Scan on compress_hyper_4_15_chunk (actual rows=2 loops=1)
                     Filter: (device_id = 1)
         ->  Seq Scan on _hyper_2_7_chunk (actual rows=2016 loops=1)
               Filter: (device_id = 1)
(10 rows)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

EXECUTE prep;
 count 
-------
  5472
(1 row)

DEALLOCATE prep;
-- test explicit self-join
-- XXX FIXME
-- :PREFIX SELECT * FROM :TEST_TABLE m1 INNER JOIN :TEST_TABLE m2 ON m1.time = m2.time ORDER BY m1.time;
-- test implicit self-join
-- XXX FIXME
-- :PREFIX SELECT * FROM :TEST_TABLE m1, :TEST_TABLE m2 WHERE m1.time = m2.time ORDER BY m1.time;
-- test self-join with sub-query
-- XXX FIXME
-- :PREFIX SELECT * FROM (SELECT * FROM :TEST_TABLE m1) m1 INNER JOIN (SELECT * FROM :TEST_TABLE m2) m2 ON m1.time = m2.time ORDER BY m1.time;
-- test system columns
-- XXX FIXME
--SELECT xmin FROM :TEST_TABLE ORDER BY time;
-- run query with parallel enabled to ensure nothing is preventing parallel execution
-- this is just a sanity check, the result queries dont run with parallel disabled
SET max_parallel_workers_per_gather TO 4;
EXPLAIN (costs off) SELECT * FROM metrics ORDER BY time, device_id;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device_id
   ->  Append
         ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk
               ->  Seq Scan on compress_hyper_3_13_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Custom Scan (DecompressChunk) on _hyper_1_3_chunk
               ->  Seq Scan on compress_hyper_3_14_chunk
(8 rows)

EXPLAIN (costs off) SELECT * FROM metrics_space ORDER BY time, device_id;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_4_chunk."time", _hyper_2_4_chunk.device_id
   ->  Gather
         Workers Planned: 4
         ->  Parallel Append
               ->  Custom Scan (DecompressChunk) on _hyper_2_4_chunk
                     ->  Parallel Seq Scan on compress_hyper_4_15_chunk
               ->  Custom Scan (DecompressChunk) on _hyper_2_5_chunk
                     ->  Parallel Seq Scan on compress_hyper_4_16_chunk
               ->  Custom Scan (DecompressChunk) on _hyper_2_6_chunk
                     ->  Parallel Seq Scan on compress_hyper_4_17_chunk
               ->  Custom Scan (DecompressChunk) on _hyper_2_10_chunk
                     ->  Parallel Seq Scan on compress_hyper_4_18_chunk
               ->  Custom Scan (DecompressChunk) on _hyper_2_11_chunk
                     ->  Parallel Seq Scan on compress_hyper_4_19_chunk
               ->  Parallel Seq Scan on _hyper_2_8_chunk
               ->  Parallel Seq Scan on _hyper_2_7_chunk
               ->  Parallel Seq Scan on _hyper_2_9_chunk
               ->  Parallel Seq Scan on _hyper_2_12_chunk
(19 rows)

-- diff compressed and uncompressed results
:DIFF_CMD
