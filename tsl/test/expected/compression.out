-- LICENSE-TIMESCALE for a copy of the license.
SET timescaledb.enable_transparent_decompression to OFF;
--TEST1 ---
--basic test with count
create table foo (a integer, b integer, c integer, d integer);
select table_name from create_hypertable('foo', 'a', chunk_time_interval=> 10);
NOTICE:  adding not-null constraint to column "a"
 table_name 
------------
 foo
(1 row)

insert into foo values( 3 , 16 , 20, 11);
insert into foo values( 10 , 10 , 20, 120);
insert into foo values( 20 , 11 , 20, 13);
insert into foo values( 30 , 12 , 20, 14);
alter table foo set (timescaledb.compress, timescaledb.compress_segmentby = 'a,b', timescaledb.compress_orderby = 'c desc, d asc nulls last');
WARNING:  Timescale License expired
select id, schema_name, table_name, compressed, compressed_hypertable_id from
_timescaledb_catalog.hypertable order by id;
 id |      schema_name      |        table_name        | compressed | compressed_hypertable_id 
----+-----------------------+--------------------------+------------+--------------------------
  1 | public                | foo                      | f          |                        2
  2 | _timescaledb_internal | _compressed_hypertable_2 | t          |                         
(2 rows)

select * from _timescaledb_catalog.hypertable_compression order by hypertable_id, attname;
 hypertable_id | attname | compression_algorithm_id | segmentby_column_index | orderby_column_index | orderby_asc | orderby_nullsfirst 
---------------+---------+--------------------------+------------------------+----------------------+-------------+--------------------
             1 | a       |                        0 |                      1 |                      |             | 
             1 | b       |                        0 |                      2 |                      |             | 
             1 | c       |                        4 |                        |                    1 | f           | t
             1 | d       |                        4 |                        |                    2 | t           | f
(4 rows)

-- TEST2 compress-chunk for the chunks created earlier --
select compress_chunk( '_timescaledb_internal._hyper_1_2_chunk');
 compress_chunk 
----------------
 
(1 row)

\x
select * from timescaledb_information.compressed_chunk_size;
-[ RECORD 1 ]------------+---------------------------------------
hypertable_name          | foo
chunk_name               | _timescaledb_internal._hyper_1_2_chunk
uncompressed_heap_bytes  | 8192 bytes
uncompressed_index_bytes | 16 kB
uncompressed_toast_bytes | 0 bytes
uncompressed_total_bytes | 24 kB
compressed_heap_bytes    | 8192 bytes
compressed_index_bytes   | 0 bytes
compressed_toast_bytes   | 8192 bytes
compressed_total_bytes   | 16 kB

\x
select compress_chunk( '_timescaledb_internal._hyper_1_1_chunk');
 compress_chunk 
----------------
 
(1 row)

\x
select * from _timescaledb_catalog.compression_chunk_size
order by chunk_id;
-[ RECORD 1 ]-----------+------
chunk_id                | 1
compressed_chunk_id     | 6
uncompressed_heap_size  | 8192
uncompressed_toast_size | 0
uncompressed_index_size | 16384
compressed_heap_size    | 8192
compressed_toast_size   | 8192
compressed_index_size   | 0
-[ RECORD 2 ]-----------+------
chunk_id                | 2
compressed_chunk_id     | 5
uncompressed_heap_size  | 8192
uncompressed_toast_size | 0
uncompressed_index_size | 16384
compressed_heap_size    | 8192
compressed_toast_size   | 8192
compressed_index_size   | 0

\x
select  ch1.id, ch1.schema_name, ch1.table_name ,  ch2.table_name as compress_table
from
_timescaledb_catalog.chunk ch1, _timescaledb_catalog.chunk ch2
where ch1.compressed_chunk_id = ch2.id;
 id |      schema_name      |    table_name    |      compress_table      
----+-----------------------+------------------+--------------------------
  2 | _timescaledb_internal | _hyper_1_2_chunk | compress_hyper_2_5_chunk
  1 | _timescaledb_internal | _hyper_1_1_chunk | compress_hyper_2_6_chunk
(2 rows)

\set ON_ERROR_STOP 0
--cannot recompress the chunk the second time around
select compress_chunk( '_timescaledb_internal._hyper_1_2_chunk');
ERROR:  chunk is already compressed
-- TEST3 check if compress data from views is accurate
CREATE TABLE conditions (
      time        TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      location2    char(10)              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL
    );
select create_hypertable( 'conditions', 'time', chunk_time_interval=> '31days'::interval);
    create_hypertable    
-------------------------
 (3,public,conditions,t)
(1 row)

alter table conditions set (timescaledb.compress, timescaledb.compress_segmentby = 'location', timescaledb.compress_orderby = 'time');
insert into conditions
select generate_series('2018-12-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'POR', 'klick', 55, 75;
select hypertable_id, attname, compression_algorithm_id , al.name
from _timescaledb_catalog.hypertable_compression hc,
     _timescaledb_catalog.hypertable ht,
      _timescaledb_catalog.compression_algorithm al
where ht.id = hc.hypertable_id and ht.table_name like 'conditions' and al.id = hc.compression_algorithm_id;
 hypertable_id |   attname   | compression_algorithm_id |               name               
---------------+-------------+--------------------------+----------------------------------
             3 | time        |                        2 | COMPRESSION_ALGORITHM_DICTIONARY
             3 | location    |                        0 | COMPRESSION_ALGORITHM_NONE
             3 | location2   |                        2 | COMPRESSION_ALGORITHM_DICTIONARY
             3 | temperature |                        3 | COMPRESSION_ALGORITHM_GORILLA
             3 | humidity    |                        3 | COMPRESSION_ALGORITHM_GORILLA
(5 rows)

select attname, attstorage, typname from pg_attribute at, pg_class cl , pg_type ty
where cl.oid = at.attrelid and  at.attnum > 0
and cl.relname = '_compressed_hypertable_4'
and atttypid = ty.oid
order by at.attnum;
    attname     | attstorage |     typname     
----------------+------------+-----------------
 time           | x          | compressed_data
 location       | x          | text
 location2      | x          | compressed_data
 temperature    | e          | compressed_data
 humidity       | e          | compressed_data
 _ts_meta_count | p          | int4
(6 rows)

SELECT ch1.schema_name|| '.' || ch1.table_name as "CHUNK_NAME", ch1.id "CHUNK_ID"
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht where ch1.hypertable_id = ht.id and ht.table_name like 'conditions'
LIMIT 1 \gset
SELECT count(*) from :CHUNK_NAME;
 count 
-------
    21
(1 row)

SELECT count(*) as "ORIGINAL_CHUNK_COUNT" from :CHUNK_NAME \gset
select tableoid::regclass, count(*) from conditions group by tableoid order by tableoid;
                tableoid                | count 
----------------------------------------+-------
 _timescaledb_internal._hyper_3_7_chunk |    21
 _timescaledb_internal._hyper_3_8_chunk |    10
(2 rows)

select  compress_chunk(ch1.schema_name|| '.' || ch1.table_name)
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht where ch1.hypertable_id = ht.id and ht.table_name like 'conditions' limit 1;
 compress_chunk 
----------------
 
(1 row)

--test that only one chunk was affected
--note tables with 0 rows will not show up in here.
select tableoid::regclass, count(*) from conditions group by tableoid order by tableoid;
                tableoid                | count 
----------------------------------------+-------
 _timescaledb_internal._hyper_3_8_chunk |    10
(1 row)

select  compress_chunk(ch1.schema_name|| '.' || ch1.table_name)
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht where ch1.hypertable_id = ht.id and ht.table_name like 'conditions' and ch1.compressed_chunk_id IS NULL;
 compress_chunk 
----------------
 
(1 row)

select tableoid::regclass, count(*) from conditions group by tableoid order by tableoid;
 tableoid | count 
----------+-------
(0 rows)

select  compressed.schema_name|| '.' || compressed.table_name as "COMPRESSED_CHUNK_NAME"
from _timescaledb_catalog.chunk uncompressed, _timescaledb_catalog.chunk compressed
where uncompressed.compressed_chunk_id = compressed.id AND uncompressed.id = :'CHUNK_ID' \gset
SELECT count(*) from :CHUNK_NAME;
 count 
-------
     0
(1 row)

SELECT count(*) from :COMPRESSED_CHUNK_NAME;
 count 
-------
     1
(1 row)

SELECT sum(_ts_meta_count) from :COMPRESSED_CHUNK_NAME;
 sum 
-----
  21
(1 row)

\x
select * from timescaledb_information.compressed_chunk_size
where hypertable_name::text like 'conditions'
order by hypertable_name, chunk_name;
-[ RECORD 1 ]------------+---------------------------------------
hypertable_name          | conditions
chunk_name               | _timescaledb_internal._hyper_3_7_chunk
uncompressed_heap_bytes  | 8192 bytes
uncompressed_index_bytes | 16 kB
uncompressed_toast_bytes | 8192 bytes
uncompressed_total_bytes | 32 kB
compressed_heap_bytes    | 8192 bytes
compressed_index_bytes   | 0 bytes
compressed_toast_bytes   | 8192 bytes
compressed_total_bytes   | 16 kB
-[ RECORD 2 ]------------+---------------------------------------
hypertable_name          | conditions
chunk_name               | _timescaledb_internal._hyper_3_8_chunk
uncompressed_heap_bytes  | 8192 bytes
uncompressed_index_bytes | 16 kB
uncompressed_toast_bytes | 8192 bytes
uncompressed_total_bytes | 32 kB
compressed_heap_bytes    | 8192 bytes
compressed_index_bytes   | 0 bytes
compressed_toast_bytes   | 8192 bytes
compressed_total_bytes   | 16 kB

select * from timescaledb_information.compressed_hypertable_size
order by hypertable_name;
-[ RECORD 1 ]------------+-----------
hypertable_name          | foo
uncompressed_heap_bytes  | 16 kB
uncompressed_index_bytes | 32 kB
uncompressed_toast_bytes | 0 bytes
uncompressed_total_bytes | 48 kB
compressed_heap_bytes    | 16 kB
compressed_index_bytes   | 0 bytes
compressed_toast_bytes   | 16 kB
compressed_total_bytes   | 32 kB
-[ RECORD 2 ]------------+-----------
hypertable_name          | conditions
uncompressed_heap_bytes  | 16 kB
uncompressed_index_bytes | 32 kB
uncompressed_toast_bytes | 16 kB
uncompressed_total_bytes | 64 kB
compressed_heap_bytes    | 16 kB
compressed_index_bytes   | 0 bytes
compressed_toast_bytes   | 16 kB
compressed_total_bytes   | 32 kB

\x
select decompress_chunk(ch1.schema_name|| '.' || ch1.table_name)
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht where ch1.hypertable_id = ht.id and ht.table_name like 'conditions';
 decompress_chunk 
------------------
 
 
(2 rows)

SELECT count(*), count(*) = :'ORIGINAL_CHUNK_COUNT' from :CHUNK_NAME;
 count | ?column? 
-------+----------
    21 | t
(1 row)

--check that the compressed chunk is dropped
\set ON_ERROR_STOP 0
SELECT count(*) from :COMPRESSED_CHUNK_NAME;
ERROR:  relation "_timescaledb_internal.compress_hyper_4_9_chunk" does not exist at character 22
\set ON_ERROR_STOP 1
--size information is gone too
select count(*) from timescaledb_information.compressed_chunk_size
where hypertable_name::text like 'conditions';
 count 
-------
     0
(1 row)

--make sure  compressed_chunk_id  is reset to NULL
select ch1.compressed_chunk_id IS NULL
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht where ch1.hypertable_id = ht.id and ht.table_name like 'conditions';
 ?column? 
----------
 t
 t
(2 rows)

-- test plans get invalidated when chunks get compressed
SET timescaledb.enable_transparent_decompression TO ON;
CREATE TABLE plan_inval(time timestamptz, device_id int);
SELECT create_hypertable('plan_inval','time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable    
-------------------------
 (5,public,plan_inval,t)
(1 row)

ALTER TABLE plan_inval SET (timescaledb.compress,timescaledb.compress_orderby='time desc');
-- create 2 chunks
INSERT INTO plan_inval SELECT * FROM (VALUES ('2000-01-01'::timestamptz,1), ('2000-01-07'::timestamptz,1)) v(time,device_id);
SET max_parallel_workers_per_gather to 0;
PREPARE prep_plan AS SELECT count(*) FROM plan_inval;
EXECUTE prep_plan;
 count 
-------
     2
(1 row)

EXECUTE prep_plan;
 count 
-------
     2
(1 row)

EXECUTE prep_plan;
 count 
-------
     2
(1 row)

-- get name of first chunk
SELECT tableoid::regclass AS "CHUNK_NAME" FROM plan_inval ORDER BY time LIMIT 1
\gset
SELECT compress_chunk(:'CHUNK_NAME');
 compress_chunk 
----------------
 
(1 row)

EXECUTE prep_plan;
 count 
-------
     2
(1 row)

EXPLAIN (COSTS OFF) EXECUTE prep_plan;
                           QUERY PLAN                           
----------------------------------------------------------------
 Aggregate
   ->  Append
         ->  Custom Scan (DecompressChunk) on _hyper_5_11_chunk
               ->  Seq Scan on compress_hyper_6_13_chunk
         ->  Seq Scan on _hyper_5_12_chunk
(5 rows)

